<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Plutslet0316</title>
        <link>https://tech.plutslet.pe.kr/</link>
        <description>Recent content on Plutslet0316</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Mon, 28 Apr 2025 23:41:26 +0900</lastBuildDate><atom:link href="https://tech.plutslet.pe.kr/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Obsidian과 Syncthing을 이용해서 기기 제한 없이 동기화 하기</title>
        <link>https://tech.plutslet.pe.kr/post/obsidian%EA%B3%BC-syncthing%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EA%B8%B0%EA%B8%B0-%EC%A0%9C%ED%95%9C-%EC%97%86%EC%9D%B4-%EB%8F%99%EA%B8%B0%ED%99%94-%ED%95%98%EA%B8%B0/</link>
        <pubDate>Mon, 28 Apr 2025 23:41:26 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/obsidian%EA%B3%BC-syncthing%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EA%B8%B0%EA%B8%B0-%EC%A0%9C%ED%95%9C-%EC%97%86%EC%9D%B4-%EB%8F%99%EA%B8%B0%ED%99%94-%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;p&gt;최근에 Obsidian을 사용해보고 있습니다. 상당히 간단하면서도 그래프나 캔버스 등의 도구를 사용할 수 있다는 게 장점인 노트 앱이죠.&lt;/p&gt;
&lt;p&gt;이런저런 자료에서 가져온 대략적인 특징은 아래와 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Obsidian 특징&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;100% 로컬에 저장됩니다.
노션과 같은 다른 노트 앱은 클라우드 저장이 기본이지만, 옵시디언은 우선적으로 로컬에 폴더와 파일의 형태로 저장됩니다. 보안이 신경 쓰인다면 이 부분에서 걱정이 없습니다.&lt;/li&gt;
&lt;li&gt;저장되는 확장자가 &lt;code&gt;.md&lt;/code&gt;, 즉 마크다운입니다.
다른 도구로 열어서 수정도 가능하고, 내용만 복사하여 다른 곳으로 옮기기 훨씬 쉽습니다.&lt;/li&gt;
&lt;li&gt;오픈소스 프로젝트라 생태계가 방대합니다.
옵시디언 앱 내부에서 커뮤니티에서 테마나 플러그인을 쉽게 찾아 적용할 수 있습니다. 단점이 있다면 관련 플러그인을 통해서 해결할 수도 있죠.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;저는 이 앱을 사용하기 전에 &lt;code&gt;동기화가 가능한가?&lt;/code&gt; 라는 질문을 먼저 던졌습니다. 공식 동기화 서비스가 있긴 했습니다. 달마다 4달러의 유료 서비스로 말이죠. 8달러는 게시까지 지원됩니다.&lt;/p&gt;
&lt;p&gt;조금 더 찾아보니 커뮤니티 플러그인을 통해서도 동기화가 가능하다는 말도 있었습니다. 그런데 그것까지 찾아보는 건 조금 귀찮았습니다. 딸깍 한 번으로 플랫폼 간 동기화를 쉽게 하고 싶었거든요.&lt;/p&gt;
&lt;p&gt;그래서 또 보니까, 이미 제가 다른 동기화 서비스를 이용 중이더군요. 그게 &lt;code&gt;Syncthing&lt;/code&gt;이었습니다.&lt;/p&gt;
&lt;p&gt;결론만 말씀드리면, &lt;code&gt;Obsidian&lt;/code&gt;과 &lt;code&gt;Syncthing&lt;/code&gt;를 이용한 동기화는 성공적이었습니다.&lt;/p&gt;
&lt;h3 id=&#34;syncthing-구성&#34;&gt;Syncthing 구성
&lt;/h3&gt;&lt;p&gt;Syncthing은 별도의 서버 없이 개인과 개인 간 동기화를 목적으로 하는 오픈소스 프로젝트 입니다. 쉽게 사용할 수 있도록 GUI도 제공되고 있습니다. 물론 모바일 앱도 있고요.&lt;/p&gt;
&lt;p&gt;대략적인 작동 방식은, 특정 폴더를 지정하면 해당 폴더 전체를 다른 기기에서 동기화 시켜서 완전 동일한 폴더가 복사 되는 방식이라고 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;약간의 단점도 명확합니다. 로컬에 해당 파일을 그대로 복사하는 방식으로 동기화가 이뤄지기 때문에 각 저장소마다 파일 만큼의 용량을 차지하게 됩니다. 보안 때문이라면 이건 단점이 아니라 하나의 특징으로 봐야겠죠.&lt;/p&gt;
&lt;p&gt;더 자세한 설명과 설치 방법은 아래 링크로 대체하겠습니다. 동기화 하고 싶은 기기마다 해당 싱크띵이 구성되어 있어야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.44bits.io/ko/post/syncthink-syncing-file-between-multiple-devices&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.44bits.io/ko/post/syncthink-syncing-file-between-multiple-devices&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;저는 아래와 같이 삼권분립 체제로 구성되어 있습니다.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;개인 우분투 서버&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;컴퓨터&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;휴대폰&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;컴퓨터에서 파일이 저장되면 개인 서버에 해당 파일이 동기화 되고, 서버에서 휴대폰으로 한 번 더 동기화가 이뤄지는 방식입니다. 클라우드 서버처럼 혹은 NAS처럼 사용 중이라고 봐도 좋습니다.&lt;/p&gt;
&lt;p&gt;위처럼 각 동기화 시키려는 플랫폼마다 Syncthing을 설치 및 구성해두었다면 준비는 끝입니다.&lt;/p&gt;
&lt;h3 id=&#34;obsidian-동기화&#34;&gt;Obsidian 동기화
&lt;/h3&gt;&lt;p&gt;Obsidian에서 동기화 하는 방법도 무척 쉽습니다.&lt;/p&gt;
&lt;p&gt;말 그대로 폴더를 전부 동기화 해버리면 끝입니다.&lt;/p&gt;
&lt;p&gt;설명이 이걸로 끝일 정도로 정말 쉽습니다.&lt;/p&gt;
&lt;p&gt;그래도 좀 더 적어보자면,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;씽크띵에 동기화할 기기를 추가합니다. 앞서 링크한 글에서 추가 방식을 확인할 수 있습니다.&lt;/li&gt;
&lt;li&gt;옵시디언에서 보관함을 생성합니다. 이때 생성되는 보관함은 단순 폴더 형식입니다.&lt;/li&gt;
&lt;li&gt;싱크띵에서 &lt;code&gt;폴더 추가&lt;/code&gt; 버튼을 눌러 해당 경로를 입력 합니다. PC에서는 아무 노트 위에서 우클릭하면 &lt;code&gt;폴더에서 보기&lt;/code&gt;라는 버튼으로 폴더 경로를 확인할 수 있습니다.&lt;/li&gt;
&lt;li&gt;공유 탭에서 동기화 할 기기를 모두 선택하고 저장합니다. 선택하지 않고 생성했다면, 추가된 폴더를 클릭하면 나오는 &lt;code&gt;편집&lt;/code&gt; 버튼을 통해서 공유할 기기를 추가할 수 있습니다.&lt;/li&gt;
&lt;li&gt;각 기기에서 동기화 승인 및 경로를 지정하여 동기화 합니다.&lt;/li&gt;
&lt;li&gt;해당 기기의 옵시디언에서 해당 폴더를 엽니다.&lt;/li&gt;
&lt;li&gt;파일이 모두 동기화 되었는지 확인합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;사용-시-특징&#34;&gt;사용 시 특징
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;동기화 속도&lt;/strong&gt;
동기화 속도는 싱크띵의 동기화 속도를 따릅니다. 저장이 되어서 변경이 감지되면 수 초 내에 동기화가 완료됩니다. 옵시디언 노트가 마크다운 방식이라 용량이 적어서 동기화 자체는 굉장히 빠른 편입니다.&lt;/p&gt;
&lt;p&gt;감지만 된다면 거의 즉시 동기화가 완료됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;동기화 반영&lt;/strong&gt;
동기화가 완료된 시점을 기준으로 설명 드리자면, PC와 모바일에서 즉시 반영됩니다.
물론 파일을 감지하는 시간이 필요하다 보니 변경 완료 후에도 약간의 딜레이는 있습니다.&lt;/p&gt;
&lt;p&gt;약간의 딜레이를 감수하면 해당 파일을 열고 있는 와중에도 변경점이 즉각 반영됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;동기화 용량&lt;/strong&gt;
앞서 잠깐 언급했듯이 마크다운 문서 위주로 공유 되기 때문에 폴더와 마크다운 문서 몇 개 정도는 수 MB 정도로도 충분합니다. 물론 문서가 많아지면 많아질 수록 용량도 커질 테지만, 텍스트 몇 천 자 적은 마크다운 용량이 얼마나 되겠습니다.&lt;/p&gt;
&lt;p&gt;마크다운 기반의 텍스트 파일이기 때문에 용량이 크지 않습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;동기화 트레픽&lt;/strong&gt;
동기화가 이뤄지지 않을 때는 기본적으로 휴면 상태입니다. 작성하는 시점에서의 윈도우 환경에서의 메모리 용량이 49.3MB 정도 되는 군요. 네트워크는 변경점을 확인하기 위한 용도의 신호를 주기적으로 보내고 받는 것으로 보입니다. 그 마저도 WiFi 환경에서만 동작하도록 제한할 수 있었습니다.&lt;/p&gt;
&lt;p&gt;50MB 이하의 메모리 사용량과 휴면 상태에서 변경을 확인하기 위한 용도의 신호를 주기적으로 주고 받습니다.&lt;/p&gt;
&lt;h3 id=&#34;결론&#34;&gt;결론
&lt;/h3&gt;&lt;p&gt;저는 일단 몇 주간 사용했을 때는 단점 없이 굉장히 편하게 사용했습니다. 주로 아이디어를 기록하는 용도로 사용하고 있는데, 앱 자체가 상당히 가볍다 보니 모바일로 대충 적은 걸 PC로 옮길 때의 스트레스가 없어졌습니다.&lt;/p&gt;
&lt;p&gt;월마다 나가는 지출도 없고 동기화 속도도 굉장히 빠른 편이라서 편합니다. 잠깐 움직이면서 휴대폰에 적은 내용이 다시 컴퓨터에 앉으면 동기화가 완료되어 있어서 만족하고 있습니다.&lt;/p&gt;
&lt;p&gt;개인적으로 사용할 목적의 노트 앱을 찾고 있고, 동기화 해서 다른 기기에서도 쉽게 옮기고 싶다면 위 방식을 고려해봐도 좋겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;관련-링크&#34;&gt;관련 링크
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Syncthing - &lt;a class=&#34;link&#34; href=&#34;https://syncthing.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://syncthing.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Obsidian - &lt;a class=&#34;link&#34; href=&#34;https://obsidian.md/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://obsidian.md/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Obsidian GitHub - &lt;a class=&#34;link&#34; href=&#34;https://github.com/obsidianmd/obsidian-releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/obsidianmd/obsidian-releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>타입스크립트에서 전개 구문(Spread Syntax) 사용 팁</title>
        <link>https://tech.plutslet.pe.kr/post/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%84%EA%B0%9C-%EA%B5%AC%EB%AC%B8spread-syntax-%EC%82%AC%EC%9A%A9-%ED%8C%81/</link>
        <pubDate>Fri, 03 Jan 2025 20:03:17 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%84%EA%B0%9C-%EA%B5%AC%EB%AC%B8spread-syntax-%EC%82%AC%EC%9A%A9-%ED%8C%81/</guid>
        <description>&lt;p&gt;전개 구문(Spread syntax)이란, 자바스크립트와 타입스크립트에서 배열이나 객체를 말 그대로 펼치는 구문입니다.&lt;/p&gt;
&lt;h3 id=&#34;배열에서-전개-구문&#34;&gt;배열에서 전개 구문
&lt;/h3&gt;&lt;p&gt;배열에서 전개 구문의 대략적인 사용법은 아래와 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;// [0, 1, 2]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(...&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// 0, 1, 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기서 전개 구문은  &lt;code&gt;…&lt;/code&gt; 입니다. 해당 구문을 사용하지 않았을 때는 배열로 묶여서 출력 되었지만, 사용했을 때는 값이 하나하나 분리되어 대입 된 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;배열의 값을 함수가 요구하는 각각에 파라미터에 전달 하려고 할 때, 일일이 변수로 분리할 필요 없이 전개 구문으로 풀어서 전달할 수 있습니다. 배열로 묶인 값이 기본 입력일 때 유용하겠죠.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 함수와 배열의 타입이 일치해야 함
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(...&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;주석문을 보면 알겠지만, 타입스크립트에서 함수에 전달되는 값이 일치하는지 검사하고 있기 때문에 배열의 수와 타입은 함수와 일치 시켜야 합니다.&lt;/p&gt;
&lt;p&gt;그리고 전개 구문은 순서대로 대입하는 것이 기본 동작이다 보니 전개 구문의 앞이나 뒤에도 평범하게 다른 파라미터도 추가할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;추가로 배열이 몇 개의 값을 가지고 있는지 모르는 경우에도 전개 구문을 활용할 수 있는 방법이 있습니다. 함수의 파라미터 값을 전개 구문으로 지정하기만 하면 배열의 개수를 지정하지 않은 상태에서도 전개 구문을 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(...&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;currValue&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;currValue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(...&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 파라미터을 전개 구문으로 받기로 한 경우, 함수에서 정의 시 다른 파라미터는 무조건 전개 구문 앞에서 정의 해야 합니다. 전개 구문 뒤에 다른 파라미터를 정의할 수 없습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;upload://9MIMTUOMVjWwB98wUfic9DvQE1G.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image|690x91&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;객체에서-전개-구문&#34;&gt;객체에서 전개 구문
&lt;/h3&gt;&lt;p&gt;객체에서의 사용도 배열과 비슷하지만, 조금 다른 점이 있습니다. 객체는 속성을 가지고 있기 때문이죠.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;something1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;2&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;something2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { ...&lt;span style=&#34;color:#a6e22e&#34;&gt;something1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;3&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;something2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// { &amp;#34;x&amp;#34;: 1, &amp;#34;y&amp;#34;: 2, &amp;#34;z&amp;#34;: 3 }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;일반적으로 객체의 원본을 유지한 채 단순히 속성을 추가하는 방식으로 사용됩니다. 동일한 속성이 있을 때는 나중에 오는 값을 따릅니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;something1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;2&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;something2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;3&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {...&lt;span style=&#34;color:#a6e22e&#34;&gt;something1&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;something2&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// { &amp;#34;x&amp;#34;: 5, &amp;#34;y&amp;#34;: 2, &amp;#34;z&amp;#34;: 3 }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;객체에서 조금 특이한 사용법이 한 가지 더 있는데, 전개 구문이 객체를 정의할 때도 사용 가능하다는 점을 응용한 것입니다. 아래의 예시를 우선 살펴봅니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isTrue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;something&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;isTrue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;3&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;something&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// { &amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: 2, &amp;#34;c&amp;#34;: undefined } 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;조건부로 어떤 속성의 값을 정의한다고 합시다. 하지만 이럴 경우엔 &lt;code&gt;c&lt;/code&gt; 속성 자체가 필요하지 않은 경우에는 또 해당 &lt;code&gt;c&lt;/code&gt; 속성이 없는 객체를 정의하는 또 다른 코드가 필요해지게 됩니다.&lt;/p&gt;
&lt;p&gt;이때 전개 구문을 응용하여 정의하면 속성의 유무 또한 조건부로 정의할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isTrue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;something&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...(&lt;span style=&#34;color:#a6e22e&#34;&gt;isTrue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;30&lt;/span&gt;}),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;something&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// { &amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: 2 } 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;마무리&#34;&gt;마무리
&lt;/h3&gt;&lt;p&gt;여기까지 간단하게 타입스크립트에서 전개 구문과 구문을 사용하는 팁을 소개해드렸습니다.&lt;/p&gt;
&lt;p&gt;조금 더 자세한 설명과 내용을 알고싶다면 아래의 링크를 참고해보세요.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;타입스크립트 전개 구문 관련 문서&lt;/strong&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.typescriptlang.org/docs/handbook/2/functions.html#rest-parameters-and-arguments&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.typescriptlang.org/docs/handbook/2/functions.html#rest-parameters-and-arguments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;자바스크립트 전개 구문 관련 문서&lt;/strong&gt;
&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SUPIR 구성해서 업스케일링 해보기</title>
        <link>https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/</link>
        <pubDate>Thu, 13 Jun 2024 00:30:18 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/</guid>
        <description>&lt;p&gt;오늘은 오픈 소스로 공개되어 있는 ‘SUPIR’ 라는 업스케일링 툴을 설치 및 구성하고 실행하기 까지의 과정을 기록하고자 합니다.&lt;br&gt;
일단 SUPIR은 우분투 환경에서 구성해야 하며, 저 같은 윈도우 환경일 경우에는 wsl을 활용하면 윈도우에서도 우분투 환경을 쉽게 구성할 수 있습니다.&lt;br&gt;
wsl 관련 설치법 등은 구글에 검색하면 많이 나오니 윈도우 환경에서 구성하고자 하면 해당 부분을 참고하여 우선 설치를 진행해주세요.&lt;/p&gt;
&lt;h2 id=&#34;요구-사양&#34;&gt;요구 사양
&lt;/h2&gt;&lt;p&gt;업스케일링 툴에서 사양을 많이 요구하는 것으로 보입니다. 깃허브의 가이드를 따라 대략 설치를 진행하게 되면 업스케일링 모델을 포함하여 대략 160GB 가량의 저장 용량을 차지하게 됩니다. 모델을 불러올 RAM 용량과 그래픽 카드의 메모리도 충분해야 원할하게 실행 및 업스케일링을 진행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;저는 위에서 설명 드린 것처럼 wsl 환경에서 진행하였고, wsl의 프로필을 활용하여 메모리 용량을 지정하여 구성하였습니다. 스왑 메모리도 지정하였는데, 일단 테스트 목적으로 진행하다 보니 일단 RAM 과 동일하게 지정하고 설치를 진행했습니다.&lt;/p&gt;
&lt;p&gt;모델 불러오는 과정이 있다보니 SSD에 설치하는 것이 좋겠으나 용량 문제로 HDD에 설치를 진행했습니다. SSD의 여유가 있다면 로딩 속도를 위해 SSD에 설치하는 것도 고려해보시면 좋겠습니다.&lt;/p&gt;
&lt;h4 id=&#34;구성-사양&#34;&gt;구성 사양
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;GPU: RTX 4070 SUPER 12GB&lt;/li&gt;
&lt;li&gt;RAM: 20GM&lt;/li&gt;
&lt;li&gt;SWAP: 20GM&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;설치-및-구성&#34;&gt;설치 및 구성
&lt;/h2&gt;&lt;h3 id=&#34;아나콘다conda-설치&#34;&gt;아나콘다(conda) 설치
&lt;/h3&gt;&lt;p&gt;SUPIR는 다양한 패키지, 종속성및 환경 관리를 제공해주는 아나콘다(conda)를 사용하고 있습니다.&lt;br&gt;
이미 아나콘다가 설치되어 있으면 넘어가도 좋습니다.&lt;br&gt;
설치되어 있지 않다면 우선 아나콘다를 설치해야 합니다.&lt;/p&gt;
&lt;p&gt;설치:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;버전 확인 &lt;a class=&#34;link&#34; href=&#34;https://repo.anaconda.com/archive/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://repo.anaconda.com/archive/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wget으로 최신 설치 파일 받아오기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://repo.anaconda.com/archive/Anaconda3-2024.02-1-Linux-x86_64.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;sh 파일 실행하여 안내에 따라 설치 진행하기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./Anaconda3-2024.02-1-Linux-x86_64.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;초기화 과정 진행
&lt;ul&gt;
&lt;li&gt;설치 경로는 다를 수 있으니 확인하여 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source /설치경로/anaconda3/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;참고 링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://velog.io/@boom109/Anaconda-%EC%84%A4%EC%B9%98-on-Ubuntu-20.04-LTS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://velog.io/@boom109/Anaconda-설치-on-Ubuntu-20.04-LTS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;supir-설치-및-구성&#34;&gt;SUPIR 설치 및 구성
&lt;/h4&gt;&lt;p&gt;SUPIR: &lt;a class=&#34;link&#34; href=&#34;https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file&lt;/a&gt;&lt;br&gt;
위의 링크로 이동하여 설치 가이드를 보고 진행해도 됩니다.&lt;br&gt;
아래의 내용은 정리의 느낌으로 크게 다르지 않습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git 복제&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/Fanghua-Yu/SUPIR.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd SUPIR
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;종속성 패키지 설치
conda 로 python 3.8의 워크스페이스를 만든 다음, 해당 워크스페이스에서 종속성 패키지 설치 진행&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda create -n SUPIR python&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3.8 -y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda activate SUPIR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install --upgrade pip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;필요 체크포인트 모델 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;필요 모델 링크는 Github에서 직접 확인하여 설치를 권장한다.&lt;br&gt;
SUPIR: &lt;a class=&#34;link&#34; href=&#34;https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file#dependent-models&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file#dependent-models&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소개된 각 모델을 클론 및 다운로드해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모델 소개 페이지인 경우, 우측 상단 케밥(점 세 개) 버튼 클릭 → Clone repository → 깃 클론과 동일한 과정으로 클론&lt;/li&gt;
&lt;li&gt;특정 파일 페이지(예, SDXL base 1.0_0.9vae)인 경우, 좌측 의 download 버튼 클릭&lt;/li&gt;
&lt;li&gt;SUPIR-v0Q, SUPIR-v0Q의 경우, 원하는 드라이브에서 다운로드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;설치 위치로 경로 수정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;필요한 파일을 전부 설치했다면, 해당 파일 주소를 매치시켜 줘야 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CKPT_PTH.py&lt;/code&gt; : LLAVA_CLIP_PATH, LLAVA_MODEL_PATH, SDXL_CLIP1_PATH, SDXL_CLIP2_CACHE_DIR&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options/SUPIR_v0.yaml&lt;/code&gt; : SDXL_CKPT, SUPIR_CKPT_Q, SUPIR_CKPT_F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행
&lt;/h3&gt;&lt;p&gt;컴퓨터 사양에 따라 옵션을 추가하여 실행할 수 있습니다. 옵션의 경우 깃허브에 자세히 안내되어 있으니 참고 바랍니다. &lt;br&gt;
옵션 링크: &lt;a class=&#34;link&#34; href=&#34;https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file#usage-of-supir&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file#usage-of-supir&lt;/a&gt; &lt;br&gt;
실행은 두 가지 방식으로 나뉩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스크립트 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python test.py --img_dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/이미지_디렉토리/&amp;#39;&lt;/span&gt; --save_dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/저장_디렉토리/&amp;#39;&lt;/span&gt; --옵션들
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Gradio 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python gradio_demo.py --옵션들
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;저는 Gradio 방식을 사용하여 실행해봤고, 아래는 제가 사용한 명령어 입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python gradio_demo.py --port &lt;span style=&#34;color:#ae81ff&#34;&gt;6688&lt;/span&gt; --use_tile_vae --no_llava --use_image_slider --loading_half_params
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 명령어를 실행하면 하드 디스크에 설치한 제 환경 기준으로 대략 15분 이상의 시간이 걸려 실행되었습니다.&lt;br&gt;
실행에 성공하면 지정한 port로 로컬 서버 하나가 실행되어 주소가 cmd 창에 출력 됩니다.&lt;br&gt;
실행된 서버에 접속하면 화질이 안좋은 이미지를 업스케일링 할 준비가 완료됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령어로 실행된 로컬 서버: &lt;a class=&#34;link&#34; href=&#34;http://localhost:6688/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhost:6688&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 항목의 설명은 깃허브에서 소개된 이미지로 대체합니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Fanghua-Yu/SUPIR/blob/master/assets/DemoGuide.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fanghua-Yu/SUPIR/master/assets/DemoGuide.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;깃허브 가이드 이미지&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;업스케일링&#34;&gt;업스케일링
&lt;/h3&gt;&lt;p&gt;제가 가진 사진 중 화질이 조금 떨어지는 사진으로 업스케일링을 진행해봤습니다. 다른 설정은 건들이지 않고 가이드 이미지 대로만 진행해보았습니다.&lt;/p&gt;
&lt;p&gt;아래는 해당 업스케일링 과정을 모두 거친 후 캡처 이미지와 비포 에프터 사진입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81_%EC%99%84%EB%A3%8C_%EC%BA%A1%EC%B3%90.png&#34;
	width=&#34;1930&#34;
	height=&#34;1622&#34;
	srcset=&#34;https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81_%EC%99%84%EB%A3%8C_%EC%BA%A1%EC%B3%90_hu_707e7350b837bd0c.png 480w, https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81_%EC%99%84%EB%A3%8C_%EC%BA%A1%EC%B3%90_hu_f6c906758d01b8ae.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;업스케일링 완료 시 캡쳐 이미지&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;285px&#34;
	
&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Before&lt;/th&gt;
          &lt;th&gt;After&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;img src=&#34;https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EA%B3%A0%EC%96%91%EC%9D%B4_%EB%B9%84%ED%8F%AC.png&#34;
	width=&#34;1200&#34;
	height=&#34;1800&#34;
	srcset=&#34;https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EA%B3%A0%EC%96%91%EC%9D%B4_%EB%B9%84%ED%8F%AC_hu_8c9d5a29d2d66be9.png 480w, https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EA%B3%A0%EC%96%91%EC%9D%B4_%EB%B9%84%ED%8F%AC_hu_a92fc8c2e1d73c6a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;고양이 비포 이미지&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;&lt;/td&gt;
          &lt;td&gt;&lt;img src=&#34;https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EA%B3%A0%EC%96%91%EC%9D%B4_%EC%97%90%ED%94%84%ED%84%B0.png&#34;
	width=&#34;1216&#34;
	height=&#34;1792&#34;
	srcset=&#34;https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EA%B3%A0%EC%96%91%EC%9D%B4_%EC%97%90%ED%94%84%ED%84%B0_hu_10b846d7ef160123.png 480w, https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/%EA%B3%A0%EC%96%91%EC%9D%B4_%EC%97%90%ED%94%84%ED%84%B0_hu_3186dd7e260fcec6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;고양이 에프터 이미지&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;비슷한 해상도로 결과물이 나왔는데도 꽤 개선된 이미지를 얻을 수 있었습니다.&lt;br&gt;
업스케일링 정도를 2로 조절해서 추가로 진행해보고 있는데 글 쓰는 중에도 계속 돌아가는 중입니다.&lt;br&gt;
아무래도 그래픽 카드로 업스케일링을 진행하는 만큼 12GB로는 성능이 따라주지는 않는 모양입니다.&lt;br&gt;
그래도 이미지 화질 개선 효과는 확실하고, 오픈소스로 제공되고 있는 만큼 화질이 좋지 못한 사진이 있다면 한 번쯤 시도해보는 것도 좋을 것 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;추가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;메모리 부족으로 실패하고 말았습니다. 아무래도 제대로 된 업스케일링을 진행하기 위해서는 더 좋은 컴퓨터가 필요할 것 같네요.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Uno Platform 마우스 커서 버튼 위에 올렸을 때 모양 바꾸기</title>
        <link>https://tech.plutslet.pe.kr/post/uno-platform-%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%BB%A4%EC%84%9C-%EB%B2%84%ED%8A%BC-%EC%9C%84%EC%97%90-%EC%98%AC%EB%A0%B8%EC%9D%84-%EB%95%8C-%EB%AA%A8%EC%96%91-%EB%B0%94%EA%BE%B8%EA%B8%B0/</link>
        <pubDate>Mon, 08 Apr 2024 23:01:27 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/uno-platform-%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%BB%A4%EC%84%9C-%EB%B2%84%ED%8A%BC-%EC%9C%84%EC%97%90-%EC%98%AC%EB%A0%B8%EC%9D%84-%EB%95%8C-%EB%AA%A8%EC%96%91-%EB%B0%94%EA%BE%B8%EA%B8%B0/</guid>
        <description>&lt;p&gt;WinUI3에서 마우스 커서를 변경하는 방법 중에는 UIElement 내부에 있는 ProtectedCursor를 변경하는 방법이 있습니다. 하지만 이름 그대로 Protected, 외부에서 접근이 되지 않기 때문에 해당 변수를 변경할 수 있는 내부 메서드가 필요합니다. 이는 상속으로 해결할 수 있는데, 버튼으로 예를 들면 아래와 같은 형태로 작성할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button2&lt;/span&gt; : Button
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ChangeCursor(InputCursor cursor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ProtectedCursor = cursor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;해당 버튼을 만들고 &lt;code&gt;ChangeCursor&lt;/code&gt; 메서드에 새로운 커서 모양을 넘겨주면 이제 해당 버튼 위에서는 커서가 지정한 모양대로 변경할 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;메서드의 호출은 아래처럼 작성할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;button.ChangeCursor(InputSystemCursor.Create(InputSystemCursorShape.Hand));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Ubuntu에서 MariaDB 자동 백업하기</title>
        <link>https://tech.plutslet.pe.kr/post/ubuntu%EC%97%90%EC%84%9C-mariadb-%EC%9E%90%EB%8F%99-%EB%B0%B1%EC%97%85%ED%95%98%EA%B8%B0/</link>
        <pubDate>Mon, 11 Mar 2024 22:32:41 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/ubuntu%EC%97%90%EC%84%9C-mariadb-%EC%9E%90%EB%8F%99-%EB%B0%B1%EC%97%85%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;p&gt;우분투에서 MariaDB의 백업본을 자동으로 생성하는 방법을 정리했습니다.&lt;/p&gt;
&lt;p&gt;우선 스크립트 파일을 작성합니다.&lt;br&gt;
아래는 예시로 원하는 데로 수정해서 작성하시면 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;backupPath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;백업위치
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;backupDate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +%Y%m%d_%H%M%S&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USERNAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;사용자이름
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;비밀번호
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DATABASE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;데이터베이스명
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mysqldump -u$USERNAME -p$PASSWORD  $DATABASE &amp;gt; $backupPath/$backupDate&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;$DATABASE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_backupDB.sql&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find $backupPath* -mtime +13 -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*backupDB*&amp;#34;&lt;/span&gt; -exec rm &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;대략 backup.sh 정도의 이름으로 스크립트 파일을 작성해두고 실행할 수 있는 권한을 줘야합니다.&lt;br&gt;
권한은 대략 700이나 100, 755 등 소유자가 실행할 권한을 필수로 지정하고, 나머지는 원하는 대로 지정합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt; /root/db_backup/backup.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 작성하고 권한까지 준 스크립트 파일을 스케줄러에 등록해야 합니다.&lt;br&gt;
우분투의 스케줄러는 crontab를 사용합니다.&lt;br&gt;
스케줄러에 등록하기 위해서는 아래의 명령을 실행합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crontab -e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;스케줄 주기의 대한 자세한 설명의 가장 아래에 참고링크를 남겨두었으니 확인해주시면 감사하겠습니다.&lt;br&gt;
crontab에 작성하는 기본적인 형태는 아래와 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* * * * * /실행위치/script.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;앞에 * 표시 부분에 반복하고자 하는 시간을 기입해야합니다.&lt;br&gt;
위치는 차례로 분, 시, 일, 월, 요일입니다.&lt;br&gt;
예를 들어 매일 3시에 실행하고자 하면 아래와 같이 작성할 수 있습니다. 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; * * * /실행위치/script.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;등록을 마쳤으면 정상적으로 등록되었는지 아래의 명령으로 확인해볼 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crontab -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;참고링크&#34;&gt;참고링크
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;백업 스크립트 관련&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wildeveloperetrain.tistory.com/208&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wildeveloperetrain.tistory.com/208&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://foxydog.tistory.com/94&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://foxydog.tistory.com/94&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://linsoo.pe.kr/%ec%9a%b0%eb%b6%84%ed%88%ac-mariadb-%ec%9e%90%eb%8f%99-%eb%b0%b1%ec%97%85%ed%95%98%ea%b8%b0/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://linsoo.pe.kr/우분투-mariadb-자동-백업하기/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;크론탭의 자세한 설명 &lt;a class=&#34;link&#34; href=&#34;https://jdm.kr/blog/2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://jdm.kr/blog/2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Uno Platform 시작하기</title>
        <link>https://tech.plutslet.pe.kr/post/uno-platform-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
        <pubDate>Sun, 03 Mar 2024 23:34:50 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/uno-platform-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;p&gt;Uno Platform은 다중 플랫폼을 지원하는 .NET 개발 도구다.&lt;/p&gt;
&lt;h3 id=&#34;특징&#34;&gt;특징
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XAML를 이용해 화면을 구성하고, C# 언어로 기능을 작성한다.&lt;/li&gt;
&lt;li&gt;Android, iOS, WebAssembly, macOS, Linux, WinUI 등 다양한 플랫폼을 지원한다.&lt;/li&gt;
&lt;li&gt;플랫폼 별로 별도의 프로젝트를 생성하는 것이 아니라, 하나의 프로젝트로 동시에 다양한 플랫폼으로 빌드할 수 있다.&lt;/li&gt;
&lt;li&gt;어떤 환경에서든 픽셀이 이동하는 위치를 픽셀 단위로 정확하게 제어(Pixel Perfect Control)할 수 있다.&lt;/li&gt;
&lt;li&gt;‘Uno Gallery’를 통해 디자인 및 샘플 코드를 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;다운로드-및-사용-방법&#34;&gt;다운로드 및 사용 방법
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;터미널로 다운로드 방법
&lt;ol&gt;
&lt;li&gt;‘Visual Studio Installer’를 이용한다면 2022 버전의 3개의 워크로드를 설치해야 한다.
&lt;ul&gt;
&lt;li&gt;ASP.NET 및 웹 개발&lt;/li&gt;
&lt;li&gt;.NET Multi-Platform App UI 개발&lt;/li&gt;
&lt;li&gt;.NET 데스크톱 개발&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;워크로드가 모두 설치되었다면 터미널에서
&lt;ol&gt;
&lt;li&gt;‘uno-check’가 설치 되지 않았다면&lt;code&gt;dotnet tool install -g uno.check&lt;/code&gt; 를 입력해 ‘uno-check’를 설치한다.&lt;/li&gt;
&lt;li&gt;설치가 되어 있다면  &lt;code&gt;dotnet tool update -g uno.check&lt;/code&gt; 를 입력해 ‘uno-check’를 업데이트 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;터미널에서 &lt;code&gt;uno-check&lt;/code&gt; 명령을 실행하고 ‘uno-check’의 안내 문구에 따라 진행하면 된다.&lt;/li&gt;
&lt;li&gt;Uno 플랫폼 확장 설치
&lt;ol&gt;
&lt;li&gt;‘코드를 사용하지 않고 시작’ 클릭&lt;/li&gt;
&lt;li&gt;상단의 바에서 ‘확장’ → ‘확장 관리’ 클릭&lt;/li&gt;
&lt;li&gt;‘uno’ 검색후 ‘Uno Platform’ 다운로드 클릭&lt;/li&gt;
&lt;li&gt;‘Visual Studio 2022’ 닫기&lt;/li&gt;
&lt;li&gt;설치 과정에서 안내 문구에 따라 진행&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;프로젝트-만들기&#34;&gt;프로젝트 만들기
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;새 프로젝트 만들기 클릭&lt;/li&gt;
&lt;li&gt;용도에 맞게 ‘Uno’ 키워드의 템플릿(Uno Platform App) 선택 후 다음&lt;/li&gt;
&lt;li&gt;프로젝트 이름 지정 후 다음
&lt;ul&gt;
&lt;li&gt;‘솔루션 및 프로젝트를 같은 디렉터리에 배치’ 옵션을 체크해야 다음으로 진행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Template Wizard를 이용해 원하는 데로 지정하여 생성 버튼 클릭&lt;/li&gt;
&lt;li&gt;프로젝트 생성 후 추가 사항
&lt;ol&gt;
&lt;li&gt;상단의 노란 배너가 나타나면 ‘프로젝트 다시 로드’ 클릭&lt;/li&gt;
&lt;li&gt;안드로이드의 경우 사용 계약 동의를 물어볼 수 있다.&lt;/li&gt;
&lt;li&gt;안드로이드 SDK 설치 안내가 나타날 수 있다. 안내 문구에 따라 설치 진행&lt;/li&gt;
&lt;li&gt;솔루션에 따라 추가 구성 요소를 설치해야할 수 있다는 안내 문구 표시되는 경우, 안내 문구에 따라 설치를 진행, 이때 추가 설치 후 ‘uno-check’를 다시 실행해야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;참조 사항&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식 홈페이지 - Uno Platform: &lt;a class=&#34;link&#34; href=&#34;https://platform.uno/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://platform.uno/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;공식 문서 - Uno Platform documentation: &lt;a class=&#34;link&#34; href=&#34;https://platform.uno/docs/articles/intro.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://platform.uno/docs/articles/intro.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;공식 문서 - Uno Gallery: &lt;a class=&#34;link&#34; href=&#34;https://gallery.platform.uno/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gallery.platform.uno/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;공식 문서 - Get Started on Visual Studio 2022: &lt;a class=&#34;link&#34; href=&#34;https://platform.uno/docs/articles/get-started-vs-2022.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://platform.uno/docs/articles/get-started-vs-2022.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>EF Core 시작하기</title>
        <link>https://tech.plutslet.pe.kr/post/ef-core-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
        <pubDate>Tue, 27 Feb 2024 22:44:50 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/ef-core-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;h3 id=&#34;ef-core&#34;&gt;EF Core
&lt;/h3&gt;&lt;p&gt;데이터베이스와 객체 지향 언어 간에 호환되지 않는 데이터를 변환해 매핑해주는 기법을 객체 관계 매핑(ORM)이라고 합니다.&lt;br&gt;
EF Core 는 .Net 기반 개체를 이용하여 데이터베이스를 작업할 수 있도록 해줍니다.&lt;/p&gt;
&lt;h3 id=&#34;요구사항&#34;&gt;요구사항
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.NET SDK&lt;/strong&gt; : &lt;a class=&#34;link&#34; href=&#34;https://dotnet.microsoft.com/en-us/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://dotnet.microsoft.com/en-us/download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt; : &lt;a class=&#34;link&#34; href=&#34;https://visualstudio.microsoft.com/ko/vs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://visualstudio.microsoft.com/ko/vs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;EntityFrameworkCore 패키지 설치&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검색을 통해 설치
&lt;ul&gt;
&lt;li&gt;도구 &amp;gt; NuGet 패키지 관리자 &amp;gt; NuGet 패키지 관리&lt;/li&gt;
&lt;li&gt;패키지 검색: &lt;code&gt;EntityFrameworkCore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;명령을 실행해 설치
&lt;ul&gt;
&lt;li&gt;도구 &amp;gt; NuGet 패키지 관리자 &amp;gt; 패키지 관리자 콘솔&lt;/li&gt;
&lt;li&gt;명령 실행: &lt;code&gt;Install-Package Microsoft.EntityFrameworkCore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Provider 패키지 설치&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아래의 패키지 중에서 사용하는 DB의 패키지를 설치하면 됩니다.&lt;br&gt;
자세한 내용은 이 &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ko-kr/ef/core/what-is-new/nuget-packages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;링크&lt;/a&gt;를 확인해주세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;데이터베이스 시스템&lt;/th&gt;
          &lt;th&gt;패키지&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;SQL Server 및 SQL Azure&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.SqlServer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.SqlServer&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SQLite&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Azure Cosmos DB&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Cosmos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Cosmos&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PostgreSQL&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL/&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;MySQL&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nuget.org/packages/Pomelo.EntityFrameworkCore.MySql/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nuget.org/packages/Pomelo.EntityFrameworkCore.MySql/&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;EF Core 메모리 내 데이터베이스**&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.InMemory&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.InMemory&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;패키지 관리자 콘솔 도구 설치&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설치: &lt;code&gt;Install-Package Microsoft.EntityFrameworkCore.Tools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ef-core-시작하기&#34;&gt;EF Core 시작하기
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Visual Studio 실행 후 새 프로젝트 만들기&lt;/li&gt;
&lt;li&gt;C# 태그가 있는 콘솔 앱을 선택해 다음 클릭&lt;/li&gt;
&lt;li&gt;이름(예, EFCoreTest)을 입력하고 만들기 클릭&lt;/li&gt;
&lt;li&gt;위의 설치 방법을 참고해 원하는 방법으로 패키지 설치&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dbcontext-구성&#34;&gt;&lt;strong&gt;DBContext 구성&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;데이터베이스와 연결하고 쿼리 및 저장하는 데 필수적인 요소&lt;/li&gt;
&lt;li&gt;아래와 같이 &lt;code&gt;DbContext&lt;/code&gt; 를 상속한 클래스 내부에 &lt;code&gt;Entity&lt;/code&gt; 와 DB 연결 정보 등을 추가할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestDbContext&lt;/span&gt;  : DbContext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기서 사용한 방식은 디자인 타임 팩터리라는 인터페이스를 구성하여 DbContext를 만드는 방법을 도구에 알리는 방법입니다.&lt;br&gt;
DB와의 연결은 여러가지 방식을 사용할 수 있습니다. 자세한 사항은 맨 아래의 참고링크를 확인해주세요.&lt;br&gt;
디자인 타임 팩터리 방식은 이 &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ko-kr/ef/core/cli/dbcontext-creation?tabs=vs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;링크&lt;/a&gt;를 확인하세요.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DbContext&lt;/code&gt; 을 아래와 같이 구성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestDbContext&lt;/span&gt;  : DbContext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TestDbContext(DbContextOptions&amp;lt;TestDbContext&amp;gt; options) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(options)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;아래과 같이 디자인 타임 팩터리에서 &lt;code&gt;DbContext&lt;/code&gt; 를 만드는 방법을 구성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestContextFactory&lt;/span&gt; : IDesignTimeDbContextFactory&amp;lt;TestDbContext&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TestDbContext CreateDbContext(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; optionsBuilder = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DbContextOptionsBuilder&amp;lt;TestDbContext&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        optionsBuilder.UseNpgsql(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server=server.maum.in; Port=25432; Database=plutslet0316; user id=plutslet0316;  password=plutslet0316&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TestDbContext(optionsBuilder.Options);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;모델-만들기&#34;&gt;모델 만들기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;클래스 형태로 구성한 &lt;code&gt;Entity&lt;/code&gt; 를 위에서 만든 &lt;code&gt;DbContext&lt;/code&gt; 에 속성으로 정의하는 것만으로도 DB의 테이블과 연결시킬 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;다음과 같이 사용자 정보와 사용자의 좋아하는 것들이 담길 클래스 생성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserInfo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ICollection&amp;lt;Favorite&amp;gt; Favorites { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; } = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Favorite&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Favorite&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Value { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; UserId { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; } &lt;span style=&#34;color:#75715e&#34;&gt;// &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; UserInfo User { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;구성한 &lt;code&gt;DbContext&lt;/code&gt; 에 해당 클래스를 &lt;code&gt;DBSet&lt;/code&gt;으로 정의합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestDbContext&lt;/span&gt;  : DbContext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DbSet&amp;lt;UserInfo&amp;gt; UserInfos { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DbSet&amp;lt;Favorite&amp;gt; Favorites { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;데이터베이스-만들기&#34;&gt;데이터베이스 만들기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;위에서 구성한 데이터베이스를 서버에서 만들기 위해서는 마이그레이션이라는 과정이 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;패키지 관리자 콘솔에서 &lt;code&gt;Add-Migration 고유값&lt;/code&gt; 실행
&lt;ul&gt;
&lt;li&gt;각각의 마이그레이션은 고유한 값이 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;패키지 관리자 콘솔에서 &lt;code&gt;Update-Database&lt;/code&gt; 실행
&lt;ul&gt;
&lt;li&gt;해당 명령어로 C#으로 작성한 데로 테이블을 만들거나 수정하는 등 데이터베이스에 업데이트합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;기본적인-사용-방법&#34;&gt;기본적인 사용 방법
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;데이터베이스 연결&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위에서 만든 &lt;code&gt;DBContext&lt;/code&gt; 를 가져옵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; var dc = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TestContextFactory().CreateDbContext([]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;생성/수정&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; favorites = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Favorite&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;favorites.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Favorite { Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;포도&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;favorites.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Favorite { Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;바나나&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;favorites.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Favorite { Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;망고&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; info = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UserInfo { Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User 1&amp;#34;&lt;/span&gt;, Favorites = favorites };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 해당 메서드를 이용해 모든 변경사항을 DB에 저장할 수 있다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dc.SaveChanges();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;읽기&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; result = &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; dc.UserInfos
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .Include(x =&amp;gt; x.Favorites)  &lt;span style=&#34;color:#75715e&#34;&gt;// 목록 불러오기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .ToListAsync();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; info &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; result)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; favoriteText = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; favorites = info.Favorites.ToList();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; count = favorites.Count();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; count; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        favoriteText += favorites[i].Value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &amp;lt; count - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) favoriteText += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;{info.Id}: {info.Name}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;{favoriteText}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;삭제&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dc.UserInfos.RemoveRange(dc.UserInfos);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dc.SaveChanges();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이번엔 설치와 간단한 사용법까지 알아봤습니다.&lt;br&gt;
다음에 기회가 되면 더 많은 내용을 다뤄보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;참고링크&#34;&gt;참고링크
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;공식:  &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ko-kr/ef/core/get-started/overview/first-app?tabs=visual-studio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/ko-kr/ef/core/get-started/overview/first-app?tabs=visual-studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.entityframeworktutorial.net/efcore/entity-framework-core.aspx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.entityframeworktutorial.net/efcore/entity-framework-core.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>input 태그 file 확장자 제한하기</title>
        <link>https://tech.plutslet.pe.kr/post/input-%ED%83%9C%EA%B7%B8-file-%ED%99%95%EC%9E%A5%EC%9E%90-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0/</link>
        <pubDate>Fri, 23 Feb 2024 22:01:31 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/input-%ED%83%9C%EA%B7%B8-file-%ED%99%95%EC%9E%A5%EC%9E%90-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;p&gt;input 태그를 사용할 떄 특정 타입만 허용하고 싶을 때가 있습니다.&lt;br&gt;
input의 accept를 지정하기만 하면 간단하게 제한할 수 있죠.&lt;br&gt;
예를 들어 image만 허용하려고 한다면 대략 아래와 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/*&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그런데 파일 선택하는 창에서 모든 파일(&lt;em&gt;.&lt;/em&gt;)을 선택할 수 있고, 이때는 accept를 지정해도 의미가 없어집니다.&lt;br&gt;
이때는 선택한 파일의 확장자를 확인하는 스크립트가 필요하게 되죠.&lt;/p&gt;
&lt;p&gt;선택한 파일을 가져와서 파일의 확장자를 확인하고, 파일의 확장자가 지정해둔 확장자가 맞다면 파일을 허용하는, 그런 절차가 필요해지게 됩니다.&lt;/p&gt;
&lt;p&gt;이런 상황에서 사용할 함수는 아래처럼 작성할 수 있습니다.&lt;br&gt;
선택한 파일들을 전부 확인하고 모두 image 형태라면 false를 image 형태가 하나라도 아니면 true를 반환하는 함수입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkFileType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;[]) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;파일 입력을 받을 때의 이벤트에 아래처럼 사용하면 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;checkFileType&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;inputFileEl&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;이미지 파일만 첨부 가능합니다.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;저는 vue3에서, 그리고 타입스크립트로 작성하고 사용해서 위의 형태지만, 함수 내부와 if문 내부는 원하는 방식으로 수정하면 됩니다.&lt;br&gt;
함수의 bool 값을 반대로 설정한다던지, 타입을 다르게 한다던지, 아래 if 내부 처리를 다르게 한다던지 등처럼 말이죠.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>html 모바일에서 input 태그 클릭시 확대 방지</title>
        <link>https://tech.plutslet.pe.kr/post/html-%EB%AA%A8%EB%B0%94%EC%9D%BC%EC%97%90%EC%84%9C-input-%ED%83%9C%EA%B7%B8-%ED%81%B4%EB%A6%AD%EC%8B%9C-%ED%99%95%EB%8C%80-%EB%B0%A9%EC%A7%80/</link>
        <pubDate>Wed, 14 Feb 2024 23:19:25 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/html-%EB%AA%A8%EB%B0%94%EC%9D%BC%EC%97%90%EC%84%9C-input-%ED%83%9C%EA%B7%B8-%ED%81%B4%EB%A6%AD%EC%8B%9C-%ED%99%95%EB%8C%80-%EB%B0%A9%EC%A7%80/</guid>
        <description>&lt;p&gt;가끔 모바일 브라우저에서 &lt;code&gt;input&lt;/code&gt; 태그를 사용한 입력란을 터치해 입력을 시작할 때 해당 입력란을 확대 시켜서 보여주는 경우가 있습니다.&lt;br&gt;
확대하지 않는 동작이 프로세스 상 올바른 동작일 때 이를 방지하는 방법이 있습니다.&lt;/p&gt;
&lt;p&gt;방법은 간단한데, &lt;code&gt;index.html&lt;/code&gt;의 &lt;code&gt;header&lt;/code&gt; 태그 안에서 &lt;code&gt;meta&lt;/code&gt; 태그로 viewport 관련해서 설정하는 부분이 있습니다.&lt;br&gt;
해당 태그 안 &lt;code&gt;content&lt;/code&gt; 부분에 &lt;code&gt;user-scalable=no&lt;/code&gt; 구문을 추가해주면 입력란을 터치할 때마다 확대하는 걸 방지할 수 있습니다.&lt;/p&gt;
&lt;p&gt;대략 아래와 같이 작성할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;width=device-width,initial-scale=1.0,user-scalable=no&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;mata&lt;/code&gt; 태그 안에 지정할 수 있는 다양한 옵션값이 있으니 관심있으시면 조금 더 알아보는 것도 좋을 것 같습니다.&lt;/p&gt;
&lt;h3 id=&#34;참고-링크&#34;&gt;참고 링크
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://talkwithcode.tistory.com/7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://talkwithcode.tistory.com/7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://taeminimini.tistory.com/438&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://taeminimini.tistory.com/438&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Vue에서 이미지 src 동적으로 할당하기</title>
        <link>https://tech.plutslet.pe.kr/post/vue%EC%97%90%EC%84%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-src-%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0/</link>
        <pubDate>Wed, 14 Feb 2024 00:34:14 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/vue%EC%97%90%EC%84%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-src-%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;p&gt;Vue에서 이미지를 동적으로 할당해야하는 부분이 있었습니다.&lt;br&gt;
대략 &lt;code&gt;/src/assets/images/img.png&lt;/code&gt; 이런 느낌의 string 타입을 반환하는 함수를 만들었고, 대략 &lt;code&gt;&amp;lt;img :src=&amp;quot;imgSrc()&amp;quot;&amp;gt;&lt;/code&gt; 이런 느낌으로 할당해봤죠.&lt;br&gt;
&lt;code&gt;npm run dev&lt;/code&gt; 통해 실행한 프로젝트에서는 위의 코드로도 잘 작동해서 문제가 없을 줄 알았습니다.&lt;br&gt;
하지만 빌드해서 확인한 페이지에서는 이미지가 표시되지 않았습니다.&lt;br&gt;
이유는 과연 뭘까요?&lt;/p&gt;
&lt;h3 id=&#34;문제&#34;&gt;문제
&lt;/h3&gt;&lt;p&gt;문제의 원인을 파악하고 보니 생각보다 간단한 문제였습니다.&lt;br&gt;
배포된 프로젝트에서 이미지를 가져올 때는 src가 위에서처럼 &amp;lsquo;/&amp;rsquo; 부터 시작하는 상대주소로 되어 있으면 안됩니다.&lt;br&gt;
상대주소로 된 링크를 참고한다면 대체 어떤 곳을 참고해야 할까요.&lt;br&gt;
참고할 주소를 찾지 못하게 되는 것이죠.&lt;/p&gt;
&lt;p&gt;로컬호스트이 아니라 빌드하여 배포한 프로젝트라면 src 부분은 &amp;lsquo;http://&amp;rsquo; 부터 시작하는 절대 링크 형태로 구성되어야 합니다.&lt;br&gt;
그럼, Vue에서 이미지의 src를 동적으로 할당하는 방법을 알아 봅시다.&lt;/p&gt;
&lt;h3 id=&#34;해결&#34;&gt;해결
&lt;/h3&gt;&lt;p&gt;아래의 방법을 사용하면 문자열로 된 상대주소를 동적으로 할당할 수 있게 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;require 사용해 이미지 불러오기&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`@/assets/images/img.png`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이미지를 &lt;code&gt;import&lt;/code&gt;한다는 의미로 &lt;code&gt;require&lt;/code&gt; 구문을 사용할 수 있습니다.
config에 사용하도록 설정된 module에 따라 사용할 수 없는 경우가 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;동적으로 URL 만들기&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`/src/assets/images/img.png`&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;meta&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SSR에서는 동작하지 않는다고 합니다.&lt;br&gt;
브라우저와 Node.js 에서 &lt;code&gt;import.meta.url&lt;/code&gt;의 값이 달라지거나 서버 입장에서도 클라이언트의 호스트 url을 미리 결정할 수 없기 때문이라고 합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;public 폴더에 이미지 넣기&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/images/img.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;말 그대로 이미지를 프로젝트 내부에서 &lt;code&gt;assets&lt;/code&gt; 폴더가 아닌 &lt;code&gt;public&lt;/code&gt;에 넣어두는 방법입니다.&lt;br&gt;
public 폴더에 넣어두면 상대 주소를 사용해도 정상적으로 불러옵니다.&lt;/p&gt;
&lt;h3 id=&#34;참고링크&#34;&gt;참고링크
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blogcreator.blog/post/39&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blogcreator.blog/post/39&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/40491506/vue-js-dynamic-images-not-working-with-webpack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/40491506/vue-js-dynamic-images-not-working-with-webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>모바일 환경에서의 css 높이 단위</title>
        <link>https://tech.plutslet.pe.kr/post/%EB%AA%A8%EB%B0%94%EC%9D%BC-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-css-%EB%86%92%EC%9D%B4-%EB%8B%A8%EC%9C%84/</link>
        <pubDate>Thu, 08 Feb 2024 00:31:19 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/%EB%AA%A8%EB%B0%94%EC%9D%BC-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-css-%EB%86%92%EC%9D%B4-%EB%8B%A8%EC%9C%84/</guid>
        <description>&lt;p&gt;css에서 hight를 조절하다가 알게된 점을 기록합니다.&lt;/p&gt;
&lt;h3 id=&#34;문제&#34;&gt;문제
&lt;/h3&gt;&lt;p&gt;대략 상황은 이랬습니다.&lt;br&gt;
main 태그의 높이를 vh 단위로 지정해서 사용하던 중 모바일 환경에서는 높이가 의도한 대로 지정되지 않았습니다.&lt;br&gt;
태그의 높이를 모바일 브라우저의 상단, 하단 메뉴의 크기를 반영해서 지정하는 것이 아니라 그냥 화면의 크기 만큼 높이를 지정해버리는 것이었죠.
그래서 화면이 일부 잘린 것처럼 보였고, 잘린 부분은 아예 접근할 수 없게 되어 버리는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;해결&#34;&gt;해결
&lt;/h3&gt;&lt;p&gt;여러가지를 조사하던 중 높이 단위가 vh만 있던 게 아니더군요.&lt;br&gt;
모바일 브라우저에 대응되는 높이 단위는 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;svh: Small Viewport Height, 가장 작은 화면 영역을 의미하는 높이 단위입니다. 상, 하단 메뉴가 없어도 해당 높이를 반영하여 값을 가져옵니다.&lt;/li&gt;
&lt;li&gt;lvh: Large Viewport Height, 가장 높은 영역을 의미하는 높이 단위입니다. 상, 하단 메뉴가 있어도 무시한 값을 가져옵니다.&lt;/li&gt;
&lt;li&gt;dvh: Dynamic Viewport Height, 동적으로 표시되는 영역의 높이 단위입니다. 상, 하단 메뉴를 확인하고 유무에 따라 해당 높이를 반영한 값을 가져옵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉 위의 높이 단위를 적절히 이용하면, 모바일 브라우저에서 상단, 하단 메뉴가 나타나고 사라지는 과정에서도 메뉴의 높이를 반영한 값을 사용할 수 있는 것이죠.&lt;/p&gt;
&lt;p&gt;저는 조사한 높이 단위 중에서 dvh를 사용했습니다.&lt;br&gt;
사용법은 아래의 코드처럼 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;dvh; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 높이 단위를 더 자세히 살펴보고 싶다면 아래의 링크도 확인해주세요.&lt;br&gt;
더 자세하게 설명되어 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://web.dev/blog/viewport-units?hl=ko&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://web.dev/blog/viewport-units?hl=ko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mong-blog.tistory.com/entry/CSSJS-vh-%eb%b2%84%ea%b7%b8-%ed%95%b4%ea%b2%b0%eb%b0%a9%eb%b2%95dvh-%ec%82%ac%ec%9a%a9%eb%b2%95-js-%ea%b3%84%ec%82%b0%eb%b2%95&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mong-blog.tistory.com/entry/CSSJS-vh-버그-해결방법dvh-사용법-js-계산법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>S3 이미지 다운로드 CORS 문제 해결</title>
        <link>https://tech.plutslet.pe.kr/post/s3-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-cors-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/</link>
        <pubDate>Fri, 02 Feb 2024 22:41:19 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/s3-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-cors-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/</guid>
        <description>&lt;p&gt;최근 Vue 프로젝트에서 S3 URL을 다운로드되는 기능을 구현해야 하는 일이 있었습니다. fetch를 이용해서 파일을 blob 형태로 받아와 다운로드 시키도록 하도록 처리했죠. 다른 파일들은 다운로드가 잘 이뤄졌는데, 어떤 페이지에서는 이미지가 CORS 오류로 다운로드되지 않는 문제가 발생했습니다. 이 글은 해당 문제를 정리한 내용입니다.&lt;/p&gt;
&lt;h3 id=&#34;문제&#34;&gt;문제
&lt;/h3&gt;&lt;p&gt;위에서 언급했듯이 S3 URL을 가지고 있었고, 해당 링크를 이용해 다운로드 되도록 기능을 구현한 상태였습니다.&lt;br&gt;
다른 페이지에서는 모두 동작하는데, 이미지를 보여주고 해당 이미지를 다운로드 할 수 있는 페이지에서만 CORS 문제를 일으켰습니다.&lt;/p&gt;
&lt;p&gt;콘솔 창에 나타난 문구는 대략 이런 문구였습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39;&lt;/span&gt; header is present on the requested resource. Origin &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://localhost:5173&amp;#39;&lt;/span&gt; is therefore not allowed access. If an opaque response serves your needs, set the request&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s mode to &amp;#39;&lt;/span&gt;no-cors&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; to fetch the resource with CORS disabled.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그래서 오류 메시지 대로 fetch의 모드를 &amp;rsquo;no-cors&amp;rsquo;로 변경하고 다시 테스트 해봤습니다.&lt;br&gt;
하지만 이제는 파일을 정상적으로 다운로드 받지 못하고 용량이 모두 0 사이즈였습니다.&lt;br&gt;
그래서 다시 돌려놓고 다른 방향으로 문제를 보기 시작했습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;혹시 페이지에서 이미지를 먼저 불러온게 문제가 된 건 아닐까.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;다르게 말하면 이미지가 캐시된 상태라서 그런 건 아닐까.&lt;/p&gt;
&lt;p&gt;정답부터 말하자면,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;캐시가 문제였습니다.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;해결&#34;&gt;해결
&lt;/h3&gt;&lt;p&gt;문제의 원인은 생각보다 간단했습니다.&lt;br&gt;
S3의 이미지가 이미 다운로드되어 페이지에서 노출이 되는 상태였고, 해당 이미지는 그렇게 캐시된 상태가 되었습니다.&lt;br&gt;
그런 다음 fetch를 이용해 이미지 다운로드 받을 경우, 이미 해당 이미지의 캐시가 남아있기 때문에 다운로드 받지 못하는 상태였던 거죠.&lt;/p&gt;
&lt;p&gt;해당 문제를 해결할 때 도움받은 블로그 글은 이사님이 찾아주셨습니다. 아래의 링크를 남겨두었으니 참고해주세요.&lt;/p&gt;
&lt;p&gt;이미지가 캐시가 된 상태라면 캐시 없이 다운로드 받으면 문제는 해결입니다.&lt;br&gt;
저는 fetch를 이용해 다운로드 받아오기 때문에 아래처럼 옵션을 추가해 주었습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no-cache&amp;#39;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;저는 추가로 CORS 모드로 설정하는  &lt;code&gt;mode: &amp;quot;cors&amp;quot;&lt;/code&gt; 같은 부분 도 추가로 작성해서 다운로드 받도록 하고 있습니다.&lt;br&gt;
아직 모르는 게 많은 저이지만,&lt;/p&gt;
&lt;p&gt;오늘도 하나씩 배워갑니다.&lt;/p&gt;
&lt;h3 id=&#34;참고자료&#34;&gt;참고자료
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://velog.io/@hyesungoh/Webview-app%ec%97%90%ec%84%9c-%ec%9d%b4%eb%af%b8%ec%a7%80-%ec%a0%80%ec%9e%a5-%ea%b8%b0%eb%8a%a5-%ea%b0%9c%eb%b0%9c%ea%b8%b0-w-AWS-s3#aws-s3-cors&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://velog.io/@hyesungoh/Webview-app에서-이미지-저장-기능-개발기-w-AWS-s3#aws-s3-cors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GitHub 페이지 커스텀 도메인 설정하기</title>
        <link>https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link>
        <pubDate>Tue, 30 Jan 2024 22:36:50 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;p&gt;깃허브 페이지로 블로그를 만들 때부터 개인 도메인으로 연결하고 싶다는 생각이 있었습니다. 이 글은 깃허브 페이지에서 커스텀 도메인 설정하며 정리한 내용입니다.&lt;/p&gt;
&lt;h3 id=&#34;시작&#34;&gt;시작
&lt;/h3&gt;&lt;p&gt;기본적으로 깃허브 페이지를 만들면 아래의 URL 형태로 만들어 집니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://깃허브아이디.github.io/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;저의 경우는 &lt;a class=&#34;link&#34; href=&#34;https://plutslet0316.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://plutslet0316.github.io/&lt;/a&gt; 입니다.&lt;br&gt;
위의 URL을 아래처럼 제 개인 도메인으로 변경할 생각입니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://blog.plutslet.pe.kr/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;도메인-dns-설정&#34;&gt;도메인 DNS 설정
&lt;/h3&gt;&lt;p&gt;현재 사용 중인 DNS 관리 사이트에서 아래의 설정을 진행합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;레코드 타입: CNAME&lt;/li&gt;
&lt;li&gt;서브 도메인(Name): 원하는 도메인 - blog&lt;/li&gt;
&lt;li&gt;대상 주소: 깃허브아이디.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;저는 클라우드플레어를 이용중이고 설정한 예시 이미지는 아래와 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/DNS_%EC%84%A4%EC%A0%95.png&#34;
	width=&#34;1515&#34;
	height=&#34;370&#34;
	srcset=&#34;https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/DNS_%EC%84%A4%EC%A0%95_hu_f38b13d9ac3da3a8.png 480w, https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/DNS_%EC%84%A4%EC%A0%95_hu_1d8274848b2111fb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;DNS 설정&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;982px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;깃허브에서-커스텀-도메인-설정&#34;&gt;깃허브에서 커스텀 도메인 설정
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;원하는 저장소에서 Setting → Pages 을 차례로 클릭해 깃허브 페이지 설정창으로 이동합니다.&lt;/li&gt;
&lt;li&gt;Custom domain 항목을 찾아 입력란에 원하는 도메인을 입력 후 Save 버튼을 클릭합니다.&lt;/li&gt;
&lt;li&gt;깃허브에서 DNS 확인을 진행하고, 이후 완료가 되면 해당 도메인으로 접근할 수 있게 됩니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;아래의 사진은 DNS 설정 후 확인까지 마친 예시 이미지 입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/%EC%BB%A4%EC%8A%A4%ED%85%80_%EB%8F%84%EB%A9%94%EC%9D%B8_%EC%84%A4%EC%A0%95.png&#34;
	width=&#34;1373&#34;
	height=&#34;199&#34;
	srcset=&#34;https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/%EC%BB%A4%EC%8A%A4%ED%85%80_%EB%8F%84%EB%A9%94%EC%9D%B8_%EC%84%A4%EC%A0%95_hu_39366211ea180de1.png 480w, https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/%EC%BB%A4%EC%8A%A4%ED%85%80_%EB%8F%84%EB%A9%94%EC%9D%B8_%EC%84%A4%EC%A0%95_hu_cb8a278d3a697ab6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;커스텀 도메인 설정&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;689&#34;
		data-flex-basis=&#34;1655px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;참고자료&#34;&gt;참고자료
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;깃허브 공식: &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github 블로그에 Custom도메인 연결하기: &lt;a class=&#34;link&#34; href=&#34;https://mishka.kr/12&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mishka.kr/12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;깃허브에 커스텀 도메인 사용하기: &lt;a class=&#34;link&#34; href=&#34;https://taedonn.tistory.com/22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://taedonn.tistory.com/22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;깃허브 블로그 개인 도메인: &lt;a class=&#34;link&#34; href=&#34;https://wonderbout.tistory.com/120&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wonderbout.tistory.com/120&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Hugo와 GitHub로 블로그 만들기</title>
        <link>https://tech.plutslet.pe.kr/post/hugo%EC%99%80-github%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
        <pubDate>Wed, 24 Jan 2024 23:06:58 +0900</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/post/hugo%EC%99%80-github%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
        <description>&lt;h3 id=&#34;hugo&#34;&gt;Hugo
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;빌드 속도가 빠릅니다.&lt;/li&gt;
&lt;li&gt;핫리로드 기능을 지원합니다.&lt;/li&gt;
&lt;li&gt;한글로 작성해도 문제없이 출력됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;요구사항&#34;&gt;요구사항
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;: &lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;a class=&#34;link&#34; href=&#34;https://go.dev/doc/install&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://go.dev/doc/install&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;최신버전: &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://go.dev/dl/go1.21.1.windows-amd64.msi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;go1.21.1.windows-amd64.msi&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dart Sass&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;패치키 툴: &lt;a class=&#34;link&#34; href=&#34;https://chocolatey.org/install#individual&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://chocolatey.org/install#individual&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;window 기준 powershell을 관리자 권한으로 실행 → 아래 명령 복사 후 붙여넣기 → 엔터해서 설치&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Set-ExecutionPolicy Bypass -Scope &lt;span style=&#34;color:#66d9ef&#34;&gt;Process&lt;/span&gt; -Force; [&lt;span style=&#34;color:#66d9ef&#34;&gt;System.Net.ServicePointManager&lt;/span&gt;]::SecurityProtocol = [&lt;span style=&#34;color:#66d9ef&#34;&gt;System.Net.ServicePointManager&lt;/span&gt;]::SecurityProtocol &lt;span style=&#34;color:#f92672&#34;&gt;-bor&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3072&lt;/span&gt;; iex ((New-Object System.Net.WebClient).DownloadString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://community.chocolatey.org/install.ps1&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dart-sass: &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/hugo-pipes/transpile-sass-to-css/#dart-sass&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/hugo-pipes/transpile-sass-to-css/#dart-sass&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령 실행 &lt;code&gt;choco install sass&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo-확장판-설치&#34;&gt;Hugo 확장판 설치
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;위에서 설치한 패키지 툴을 이용해서 확장판설치&lt;/li&gt;
&lt;li&gt;&lt;code&gt;choco install hugo-extended&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo로-블로그-구축하기&#34;&gt;Hugo로 블로그 구축하기
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;원하는 위치에서 &lt;code&gt;hugo new site 폴더이름&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;해당 위치에 폴더이름으로 hugo 사이트가 만들어 진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd 폴더이름&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://themes.gohugo.io/&lt;/a&gt; 해당 사이트에서 원하는 테마 찾기
&lt;ul&gt;
&lt;li&gt;찾은 테마
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://themes.gohugo.io/themes/hugo-theme-stack/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CaiJimmy/hugo-theme-stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;테마 적용 - &lt;code&gt;git submodule add git주소 themes/테마이름&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;예시: &lt;code&gt;git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/stack&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hugo.toml 수정
&lt;ul&gt;
&lt;li&gt;baseURL 수정: &lt;a class=&#34;link&#34; href=&#34;https://%ea%b9%83%ed%97%88%eb%b8%8c%ec%95%84%ec%9d%b4%eb%94%94.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://깃허브아이디.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;테마 지정: &lt;code&gt;theme = &#39;테마이름’&lt;/code&gt; / 예시: &lt;code&gt;theme = &#39;stack’&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로컬 테스트: &lt;code&gt;hugo server&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;깃허브에-업로드&#34;&gt;깃허브에 업로드
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;깃허브에 업로드하기 위해서 레파지토리가 두개 필요합니다.
&lt;ol&gt;
&lt;li&gt;Hugo로 만들어진 블로그 생성기 (private)&lt;/li&gt;
&lt;li&gt;Hugo가 랜더링한 정적 블로그 html (public)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;레파지토리를 만든 이후 아래의 명령을 수정하고 입력하여 깃허브의 초기 설정을 진행합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin 1번레파짓토리git주소
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add -b master 2번레파짓토리git주소 public
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;깃허브 설정 이후 아래의 명령을 통해 빌드하여 깃허브에 업로드 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo -D
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd public
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;깃허브-페이지-활성화&#34;&gt;깃허브 페이지 활성화
&lt;/h3&gt;&lt;p&gt;위에서 만든 2번 레파지토리의 깃허브 페이지를 활성화하면 깃블로그 구축이 완료됩니다.&lt;/p&gt;
&lt;h3 id=&#34;참고자료&#34;&gt;참고자료
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;공식 설치 지침: &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/installation/windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/installation/windows/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;한글 자료Hugo로 개인 블로그 만드는 법: &lt;a class=&#34;link&#34; href=&#34;https://selfinvestfriends.tistory.com/78&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://selfinvestfriends.tistory.com/78&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub Pages 빠른 시작: &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/ko/pages/quickstart&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.github.com/ko/pages/quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;깃허브 페이지(GitHub Pages) 만들기: &lt;a class=&#34;link&#34; href=&#34;https://phodobit.kr/49&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://phodobit.kr/49&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>검색</title>
        <link>https://tech.plutslet.pe.kr/page/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/page/search/</guid>
        <description></description>
        </item>
        <item>
        <title>아카이브</title>
        <link>https://tech.plutslet.pe.kr/page/archives/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://tech.plutslet.pe.kr/page/archives/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
