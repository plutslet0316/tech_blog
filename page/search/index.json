[{"content":"전개 구문(Spread syntax)이란, 자바스크립트와 타입스크립트에서 배열이나 객체를 말 그대로 펼치는 구문입니다.\n배열에서 전개 구문 배열에서 전개 구문의 대략적인 사용법은 아래와 같습니다.\nconst args = [0, 1, 2] console.log(args) // [0, 1, 2] console.log(...args) // 0, 1, 2 여기서 전개 구문은 … 입니다. 해당 구문을 사용하지 않았을 때는 배열로 묶여서 출력 되었지만, 사용했을 때는 값이 하나하나 분리되어 대입 된 것을 볼 수 있습니다.\n배열의 값을 함수가 요구하는 각각에 파라미터에 전달 하려고 할 때, 일일이 변수로 분리할 필요 없이 전개 구문으로 풀어서 전달할 수 있습니다. 배열로 묶인 값이 기본 입력일 때 유용하겠죠.\nfunction sum(x:number, y:number, z:number) { return x + y + z; } // 함수와 배열의 타입이 일치해야 함 const arr:[number, number, number] = [1, 2, 3] sum(...arr) 주석문을 보면 알겠지만, 타입스크립트에서 함수에 전달되는 값이 일치하는지 검사하고 있기 때문에 배열의 수와 타입은 함수와 일치 시켜야 합니다.\n그리고 전개 구문은 순서대로 대입하는 것이 기본 동작이다 보니 전개 구문의 앞이나 뒤에도 평범하게 다른 파라미터도 추가할 수 있습니다.\nfunction sum(a:number, b:number, c:number, d:number) { return a + b + c + d; } const arr: [number, number] = [2, 3] sum(1, ...arr, 4) 추가로 배열이 몇 개의 값을 가지고 있는지 모르는 경우에도 전개 구문을 활용할 수 있는 방법이 있습니다. 함수의 파라미터 값을 전개 구문으로 지정하기만 하면 배열의 개수를 지정하지 않은 상태에서도 전개 구문을 사용할 수 있습니다.\nfunction sum(...m:number[]) { return m.reduce(function add(sum, currValue) { return sum + currValue; }, 0); } const arr = [1, 2, 3] sum(...arr) 이렇게 파라미터을 전개 구문으로 받기로 한 경우, 함수에서 정의 시 다른 파라미터는 무조건 전개 구문 앞에서 정의 해야 합니다. 전개 구문 뒤에 다른 파라미터를 정의할 수 없습니다.\n객체에서 전개 구문 객체에서의 사용도 배열과 비슷하지만, 조금 다른 점이 있습니다. 객체는 속성을 가지고 있기 때문이죠.\nconst something1 = { x: 1, y: 2 } const something2 = { ...something1, z: 3 } console.log(something2) // { \u0026#34;x\u0026#34;: 1, \u0026#34;y\u0026#34;: 2, \u0026#34;z\u0026#34;: 3 } 일반적으로 객체의 원본을 유지한 채 단순히 속성을 추가하는 방식으로 사용됩니다. 동일한 속성이 있을 때는 나중에 오는 값을 따릅니다.\nconst something1 = { x: 1, y: 2 } const something2 = { x: 5, z: 3 } const merge = {...something1, ...something2} console.log(merge) // { \u0026#34;x\u0026#34;: 5, \u0026#34;y\u0026#34;: 2, \u0026#34;z\u0026#34;: 3 } 객체에서 조금 특이한 사용법이 한 가지 더 있는데, 전개 구문이 객체를 정의할 때도 사용 가능하다는 점을 응용한 것입니다. 아래의 예시를 우선 살펴봅니다.\nconst isTrue = false; const something = { a: 1, b: 2, c: isTrue ? 3 : undefined, }; console.log(something) // { \u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2, \u0026#34;c\u0026#34;: undefined } 조건부로 어떤 속성의 값을 정의한다고 합시다. 하지만 이럴 경우엔 c 속성 자체가 필요하지 않은 경우에는 또 해당 c 속성이 없는 객체를 정의하는 또 다른 코드가 필요해지게 됩니다.\n이때 전개 구문을 응용하여 정의하면 속성의 유무 또한 조건부로 정의할 수 있습니다.\nconst isTrue = false; const something = { a: 1, b: 2, ...(isTrue \u0026amp;\u0026amp; { c: 30}), }; console.log(something) // { \u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2 } 마무리 여기까지 간단하게 타입스크립트에서 전개 구문과 구문을 사용하는 팁을 소개해드렸습니다.\n조금 더 자세한 설명과 내용을 알고싶다면 아래의 링크를 참고해보세요.\n타입스크립트 전개 구문 관련 문서 https://www.typescriptlang.org/docs/handbook/2/functions.html#rest-parameters-and-arguments\n자바스크립트 전개 구문 관련 문서 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n","date":"2025-01-03T20:03:17+09:00","permalink":"https://tech.plutslet.pe.kr/post/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%84%EA%B0%9C-%EA%B5%AC%EB%AC%B8spread-syntax-%EC%82%AC%EC%9A%A9-%ED%8C%81/","title":"타입스크립트에서 전개 구문(Spread Syntax) 사용 팁"},{"content":"오늘은 오픈 소스로 공개되어 있는 ‘SUPIR’ 라는 업스케일링 툴을 설치 및 구성하고 실행하기 까지의 과정을 기록하고자 합니다.\n일단 SUPIR은 우분투 환경에서 구성해야 하며, 저 같은 윈도우 환경일 경우에는 wsl을 활용하면 윈도우에서도 우분투 환경을 쉽게 구성할 수 있습니다.\nwsl 관련 설치법 등은 구글에 검색하면 많이 나오니 윈도우 환경에서 구성하고자 하면 해당 부분을 참고하여 우선 설치를 진행해주세요.\n요구 사양 업스케일링 툴에서 사양을 많이 요구하는 것으로 보입니다. 깃허브의 가이드를 따라 대략 설치를 진행하게 되면 업스케일링 모델을 포함하여 대략 160GB 가량의 저장 용량을 차지하게 됩니다. 모델을 불러올 RAM 용량과 그래픽 카드의 메모리도 충분해야 원할하게 실행 및 업스케일링을 진행할 수 있습니다.\n저는 위에서 설명 드린 것처럼 wsl 환경에서 진행하였고, wsl의 프로필을 활용하여 메모리 용량을 지정하여 구성하였습니다. 스왑 메모리도 지정하였는데, 일단 테스트 목적으로 진행하다 보니 일단 RAM 과 동일하게 지정하고 설치를 진행했습니다.\n모델 불러오는 과정이 있다보니 SSD에 설치하는 것이 좋겠으나 용량 문제로 HDD에 설치를 진행했습니다. SSD의 여유가 있다면 로딩 속도를 위해 SSD에 설치하는 것도 고려해보시면 좋겠습니다.\n구성 사양 GPU: RTX 4070 SUPER 12GB RAM: 20GM SWAP: 20GM 설치 및 구성 아나콘다(conda) 설치 SUPIR는 다양한 패키지, 종속성및 환경 관리를 제공해주는 아나콘다(conda)를 사용하고 있습니다.\n이미 아나콘다가 설치되어 있으면 넘어가도 좋습니다.\n설치되어 있지 않다면 우선 아나콘다를 설치해야 합니다.\n설치:\n버전 확인 https://repo.anaconda.com/archive/ wget으로 최신 설치 파일 받아오기 wget https://repo.anaconda.com/archive/Anaconda3-2024.02-1-Linux-x86_64.sh sh 파일 실행하여 안내에 따라 설치 진행하기 ./Anaconda3-2024.02-1-Linux-x86_64.sh 초기화 과정 진행 설치 경로는 다를 수 있으니 확인하여 입력 source /설치경로/anaconda3/bin/activate conda init source ~/.bashrc 참고 링크\nhttps://velog.io/@boom109/Anaconda-설치-on-Ubuntu-20.04-LTS SUPIR 설치 및 구성 SUPIR: https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file\n위의 링크로 이동하여 설치 가이드를 보고 진행해도 됩니다.\n아래의 내용은 정리의 느낌으로 크게 다르지 않습니다.\nGit 복제 git clone https://github.com/Fanghua-Yu/SUPIR.git cd SUPIR 종속성 패키지 설치 conda 로 python 3.8의 워크스페이스를 만든 다음, 해당 워크스페이스에서 종속성 패키지 설치 진행 conda create -n SUPIR python=3.8 -y conda activate SUPIR pip install --upgrade pip pip install -r requirements.txt 필요 체크포인트 모델 설치\n필요 모델 링크는 Github에서 직접 확인하여 설치를 권장한다.\nSUPIR: https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file#dependent-models\n소개된 각 모델을 클론 및 다운로드해야 한다.\n모델 소개 페이지인 경우, 우측 상단 케밥(점 세 개) 버튼 클릭 → Clone repository → 깃 클론과 동일한 과정으로 클론 특정 파일 페이지(예, SDXL base 1.0_0.9vae)인 경우, 좌측 의 download 버튼 클릭 SUPIR-v0Q, SUPIR-v0Q의 경우, 원하는 드라이브에서 다운로드 설치 위치로 경로 수정\n필요한 파일을 전부 설치했다면, 해당 파일 주소를 매치시켜 줘야 한다. CKPT_PTH.py : LLAVA_CLIP_PATH, LLAVA_MODEL_PATH, SDXL_CLIP1_PATH, SDXL_CLIP2_CACHE_DIR options/SUPIR_v0.yaml : SDXL_CKPT, SUPIR_CKPT_Q, SUPIR_CKPT_F 실행 컴퓨터 사양에 따라 옵션을 추가하여 실행할 수 있습니다. 옵션의 경우 깃허브에 자세히 안내되어 있으니 참고 바랍니다. 옵션 링크: https://github.com/Fanghua-Yu/SUPIR?tab=readme-ov-file#usage-of-supir 실행은 두 가지 방식으로 나뉩니다.\n스크립트 방식 python test.py --img_dir \u0026#39;/이미지_디렉토리/\u0026#39; --save_dir \u0026#39;/저장_디렉토리/\u0026#39; --옵션들 Gradio 방식 python gradio_demo.py --옵션들 저는 Gradio 방식을 사용하여 실행해봤고, 아래는 제가 사용한 명령어 입니다.\npython gradio_demo.py --port 6688 --use_tile_vae --no_llava --use_image_slider --loading_half_params 이 명령어를 실행하면 하드 디스크에 설치한 제 환경 기준으로 대략 15분 이상의 시간이 걸려 실행되었습니다.\n실행에 성공하면 지정한 port로 로컬 서버 하나가 실행되어 주소가 cmd 창에 출력 됩니다.\n실행된 서버에 접속하면 화질이 안좋은 이미지를 업스케일링 할 준비가 완료됩니다.\n명령어로 실행된 로컬 서버: http://localhost:6688 각 항목의 설명은 깃허브에서 소개된 이미지로 대체합니다.\n업스케일링 제가 가진 사진 중 화질이 조금 떨어지는 사진으로 업스케일링을 진행해봤습니다. 다른 설정은 건들이지 않고 가이드 이미지 대로만 진행해보았습니다.\n아래는 해당 업스케일링 과정을 모두 거친 후 캡처 이미지와 비포 에프터 사진입니다.\nBefore After 비슷한 해상도로 결과물이 나왔는데도 꽤 개선된 이미지를 얻을 수 있었습니다.\n업스케일링 정도를 2로 조절해서 추가로 진행해보고 있는데 글 쓰는 중에도 계속 돌아가는 중입니다.\n아무래도 그래픽 카드로 업스케일링을 진행하는 만큼 12GB로는 성능이 따라주지는 않는 모양입니다.\n그래도 이미지 화질 개선 효과는 확실하고, 오픈소스로 제공되고 있는 만큼 화질이 좋지 못한 사진이 있다면 한 번쯤 시도해보는 것도 좋을 것 같습니다.\n추가 메모리 부족으로 실패하고 말았습니다. 아무래도 제대로 된 업스케일링을 진행하기 위해서는 더 좋은 컴퓨터가 필요할 것 같네요.\n","date":"2024-06-13T00:30:18+09:00","permalink":"https://tech.plutslet.pe.kr/post/supir-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%84%9C-%EC%97%85%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%ED%95%B4%EB%B3%B4%EA%B8%B0/","title":"SUPIR 구성해서 업스케일링 해보기"},{"content":"WinUI3에서 마우스 커서를 변경하는 방법 중에는 UIElement 내부에 있는 ProtectedCursor를 변경하는 방법이 있습니다. 하지만 이름 그대로 Protected, 외부에서 접근이 되지 않기 때문에 해당 변수를 변경할 수 있는 내부 메서드가 필요합니다. 이는 상속으로 해결할 수 있는데, 버튼으로 예를 들면 아래와 같은 형태로 작성할 수 있습니다.\npublic class Button2 : Button { public void ChangeCursor(InputCursor cursor) { this.ProtectedCursor = cursor; } } 해당 버튼을 만들고 ChangeCursor 메서드에 새로운 커서 모양을 넘겨주면 이제 해당 버튼 위에서는 커서가 지정한 모양대로 변경할 수 있게 됩니다.\n메서드의 호출은 아래처럼 작성할 수 있습니다.\nbutton.ChangeCursor(InputSystemCursor.Create(InputSystemCursorShape.Hand)); ","date":"2024-04-08T23:01:27+09:00","permalink":"https://tech.plutslet.pe.kr/post/uno-platform-%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%BB%A4%EC%84%9C-%EB%B2%84%ED%8A%BC-%EC%9C%84%EC%97%90-%EC%98%AC%EB%A0%B8%EC%9D%84-%EB%95%8C-%EB%AA%A8%EC%96%91-%EB%B0%94%EA%BE%B8%EA%B8%B0/","title":"Uno Platform 마우스 커서 버튼 위에 올렸을 때 모양 바꾸기"},{"content":"우분투에서 MariaDB의 백업본을 자동으로 생성하는 방법을 정리했습니다.\n우선 스크립트 파일을 작성합니다.\n아래는 예시로 원하는 데로 수정해서 작성하시면 됩니다.\nbackupPath=백업위치 backupDate=$(date +%Y%m%d_%H%M%S) USERNAME=사용자이름 PASSWORD=비밀번호 DATABASE=데이터베이스명 mysqldump -u$USERNAME -p$PASSWORD $DATABASE \u0026gt; $backupPath/$backupDate\u0026#39;_\u0026#39;$DATABASE\u0026#39;_backupDB.sql\u0026#39; find $backupPath* -mtime +13 -name \u0026#34;*backupDB*\u0026#34; -exec rm {} \\; 대략 backup.sh 정도의 이름으로 스크립트 파일을 작성해두고 실행할 수 있는 권한을 줘야합니다.\n권한은 대략 700이나 100, 755 등 소유자가 실행할 권한을 필수로 지정하고, 나머지는 원하는 대로 지정합니다.\nchmod 700 /root/db_backup/backup.sh 이제 작성하고 권한까지 준 스크립트 파일을 스케줄러에 등록해야 합니다.\n우분투의 스케줄러는 crontab를 사용합니다.\n스케줄러에 등록하기 위해서는 아래의 명령을 실행합니다.\ncrontab -e 스케줄 주기의 대한 자세한 설명의 가장 아래에 참고링크를 남겨두었으니 확인해주시면 감사하겠습니다.\ncrontab에 작성하는 기본적인 형태는 아래와 같습니다.\n* * * * * /실행위치/script.sh 앞에 * 표시 부분에 반복하고자 하는 시간을 기입해야합니다.\n위치는 차례로 분, 시, 일, 월, 요일입니다.\n예를 들어 매일 3시에 실행하고자 하면 아래와 같이 작성할 수 있습니다. 됩니다.\n* 3 * * * /실행위치/script.sh 등록을 마쳤으면 정상적으로 등록되었는지 아래의 명령으로 확인해볼 수 있습니다.\ncrontab -l 참고링크 백업 스크립트 관련\nhttps://wildeveloperetrain.tistory.com/208 https://foxydog.tistory.com/94 https://linsoo.pe.kr/우분투-mariadb-자동-백업하기/ 크론탭의 자세한 설명 https://jdm.kr/blog/2\n","date":"2024-03-11T22:32:41+09:00","permalink":"https://tech.plutslet.pe.kr/post/ubuntu%EC%97%90%EC%84%9C-mariadb-%EC%9E%90%EB%8F%99-%EB%B0%B1%EC%97%85%ED%95%98%EA%B8%B0/","title":"Ubuntu에서 MariaDB 자동 백업하기"},{"content":"Uno Platform은 다중 플랫폼을 지원하는 .NET 개발 도구다.\n특징 XAML를 이용해 화면을 구성하고, C# 언어로 기능을 작성한다. Android, iOS, WebAssembly, macOS, Linux, WinUI 등 다양한 플랫폼을 지원한다. 플랫폼 별로 별도의 프로젝트를 생성하는 것이 아니라, 하나의 프로젝트로 동시에 다양한 플랫폼으로 빌드할 수 있다. 어떤 환경에서든 픽셀이 이동하는 위치를 픽셀 단위로 정확하게 제어(Pixel Perfect Control)할 수 있다. ‘Uno Gallery’를 통해 디자인 및 샘플 코드를 확인할 수 있다. 다운로드 및 사용 방법 터미널로 다운로드 방법 ‘Visual Studio Installer’를 이용한다면 2022 버전의 3개의 워크로드를 설치해야 한다. ASP.NET 및 웹 개발 .NET Multi-Platform App UI 개발 .NET 데스크톱 개발 워크로드가 모두 설치되었다면 터미널에서 ‘uno-check’가 설치 되지 않았다면dotnet tool install -g uno.check 를 입력해 ‘uno-check’를 설치한다. 설치가 되어 있다면 dotnet tool update -g uno.check 를 입력해 ‘uno-check’를 업데이트 한다. 터미널에서 uno-check 명령을 실행하고 ‘uno-check’의 안내 문구에 따라 진행하면 된다. Uno 플랫폼 확장 설치 ‘코드를 사용하지 않고 시작’ 클릭 상단의 바에서 ‘확장’ → ‘확장 관리’ 클릭 ‘uno’ 검색후 ‘Uno Platform’ 다운로드 클릭 ‘Visual Studio 2022’ 닫기 설치 과정에서 안내 문구에 따라 진행 프로젝트 만들기 새 프로젝트 만들기 클릭 용도에 맞게 ‘Uno’ 키워드의 템플릿(Uno Platform App) 선택 후 다음 프로젝트 이름 지정 후 다음 ‘솔루션 및 프로젝트를 같은 디렉터리에 배치’ 옵션을 체크해야 다음으로 진행 가능 Template Wizard를 이용해 원하는 데로 지정하여 생성 버튼 클릭 프로젝트 생성 후 추가 사항 상단의 노란 배너가 나타나면 ‘프로젝트 다시 로드’ 클릭 안드로이드의 경우 사용 계약 동의를 물어볼 수 있다. 안드로이드 SDK 설치 안내가 나타날 수 있다. 안내 문구에 따라 설치 진행 솔루션에 따라 추가 구성 요소를 설치해야할 수 있다는 안내 문구 표시되는 경우, 안내 문구에 따라 설치를 진행, 이때 추가 설치 후 ‘uno-check’를 다시 실행해야 한다. 참조 사항\n공식 홈페이지 - Uno Platform: https://platform.uno/ 공식 문서 - Uno Platform documentation: https://platform.uno/docs/articles/intro.html 공식 문서 - Uno Gallery: https://gallery.platform.uno/ 공식 문서 - Get Started on Visual Studio 2022: https://platform.uno/docs/articles/get-started-vs-2022.html ","date":"2024-03-03T23:34:50+09:00","permalink":"https://tech.plutslet.pe.kr/post/uno-platform-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/","title":"Uno Platform 시작하기"},{"content":"EF Core 데이터베이스와 객체 지향 언어 간에 호환되지 않는 데이터를 변환해 매핑해주는 기법을 객체 관계 매핑(ORM)이라고 합니다.\nEF Core 는 .Net 기반 개체를 이용하여 데이터베이스를 작업할 수 있도록 해줍니다.\n요구사항 .NET SDK : https://dotnet.microsoft.com/en-us/download Visual Studio : https://visualstudio.microsoft.com/ko/vs/ 설치 EntityFrameworkCore 패키지 설치\n검색을 통해 설치 도구 \u0026gt; NuGet 패키지 관리자 \u0026gt; NuGet 패키지 관리 패키지 검색: EntityFrameworkCore 명령을 실행해 설치 도구 \u0026gt; NuGet 패키지 관리자 \u0026gt; 패키지 관리자 콘솔 명령 실행: Install-Package Microsoft.EntityFrameworkCore Provider 패키지 설치\n아래의 패키지 중에서 사용하는 DB의 패키지를 설치하면 됩니다.\n자세한 내용은 이 링크를 확인해주세요. 데이터베이스 시스템 패키지 SQL Server 및 SQL Azure https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.SqlServer SQLite https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite Azure Cosmos DB https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Cosmos PostgreSQL https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL/ MySQL https://www.nuget.org/packages/Pomelo.EntityFrameworkCore.MySql/ EF Core 메모리 내 데이터베이스** https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.InMemory 패키지 관리자 콘솔 도구 설치\n설치: Install-Package Microsoft.EntityFrameworkCore.Tools EF Core 시작하기 Visual Studio 실행 후 새 프로젝트 만들기 C# 태그가 있는 콘솔 앱을 선택해 다음 클릭 이름(예, EFCoreTest)을 입력하고 만들기 클릭 위의 설치 방법을 참고해 원하는 방법으로 패키지 설치 DBContext 구성 데이터베이스와 연결하고 쿼리 및 저장하는 데 필수적인 요소 아래와 같이 DbContext 를 상속한 클래스 내부에 Entity 와 DB 연결 정보 등을 추가할 수 있습니다. public class TestDbContext : DbContext { } 여기서 사용한 방식은 디자인 타임 팩터리라는 인터페이스를 구성하여 DbContext를 만드는 방법을 도구에 알리는 방법입니다.\nDB와의 연결은 여러가지 방식을 사용할 수 있습니다. 자세한 사항은 맨 아래의 참고링크를 확인해주세요.\n디자인 타임 팩터리 방식은 이 링크를 확인하세요.\nDbContext 을 아래와 같이 구성합니다. public class TestDbContext : DbContext { public TestDbContext(DbContextOptions\u0026lt;TestDbContext\u0026gt; options) : base(options) { } } 아래과 같이 디자인 타임 팩터리에서 DbContext 를 만드는 방법을 구성합니다. public class TestContextFactory : IDesignTimeDbContextFactory\u0026lt;TestDbContext\u0026gt; { public TestDbContext CreateDbContext(string[] args) { var optionsBuilder = new DbContextOptionsBuilder\u0026lt;TestDbContext\u0026gt;(); optionsBuilder.UseNpgsql(\u0026#34;Server=server.maum.in; Port=25432; Database=plutslet0316; user id=plutslet0316; password=plutslet0316\u0026#34;); return new TestDbContext(optionsBuilder.Options); } } 모델 만들기 클래스 형태로 구성한 Entity 를 위에서 만든 DbContext 에 속성으로 정의하는 것만으로도 DB의 테이블과 연결시킬 수 있습니다. 다음과 같이 사용자 정보와 사용자의 좋아하는 것들이 담길 클래스 생성합니다. public class UserInfo { public int Id { get; set; } public string Name { get; set; } public ICollection\u0026lt;Favorite\u0026gt; Favorites { get; set; } = new List\u0026lt;Favorite\u0026gt;(); } public class Favorite { public int Id { get; set; } public string Value { get; set; } public int UserId { get; set; } // public UserInfo User { get; set; } } 구성한 DbContext 에 해당 클래스를 DBSet으로 정의합니다. public class TestDbContext : DbContext { public DbSet\u0026lt;UserInfo\u0026gt; UserInfos { get; set; } public DbSet\u0026lt;Favorite\u0026gt; Favorites { get; set; } ... } 데이터베이스 만들기 위에서 구성한 데이터베이스를 서버에서 만들기 위해서는 마이그레이션이라는 과정이 필요합니다. 패키지 관리자 콘솔에서 Add-Migration 고유값 실행 각각의 마이그레이션은 고유한 값이 필요합니다. 패키지 관리자 콘솔에서 Update-Database 실행 해당 명령어로 C#으로 작성한 데로 테이블을 만들거나 수정하는 등 데이터베이스에 업데이트합니다. 기본적인 사용 방법 데이터베이스 연결\n위에서 만든 DBContext 를 가져옵니다. using var dc = new TestContextFactory().CreateDbContext([]); 생성/수정\nvar favorites = new List\u0026lt;Favorite\u0026gt;(); favorites.Add(new Favorite { Value = \u0026#34;포도\u0026#34; }); favorites.Add(new Favorite { Value = \u0026#34;바나나\u0026#34; }); favorites.Add(new Favorite { Value = \u0026#34;망고\u0026#34; }); var info = new UserInfo { Name = \u0026#34;User 1\u0026#34;, Favorites = favorites }; // 해당 메서드를 이용해 모든 변경사항을 DB에 저장할 수 있다. dc.SaveChanges(); 읽기\nvar result = await dc.UserInfos .Include(x =\u0026gt; x.Favorites) // 목록 불러오기 .ToListAsync(); foreach (var info in result) { var favoriteText = \u0026#34;\u0026#34;; var favorites = info.Favorites.ToList(); var count = favorites.Count(); for (var i = 0; i \u0026lt; count; i++) { favoriteText += favorites[i].Value; if (i \u0026lt; count - 1) favoriteText += \u0026#34;, \u0026#34;; } Console.WriteLine($\u0026#34;{info.Id}: {info.Name}\u0026#34;); Console.WriteLine($\u0026#34;{favoriteText}\u0026#34;); } 삭제\ndc.UserInfos.RemoveRange(dc.UserInfos); dc.SaveChanges(); 이번엔 설치와 간단한 사용법까지 알아봤습니다.\n다음에 기회가 되면 더 많은 내용을 다뤄보겠습니다.\n참고링크 공식: https://learn.microsoft.com/ko-kr/ef/core/get-started/overview/first-app?tabs=visual-studio https://www.entityframeworktutorial.net/efcore/entity-framework-core.aspx ","date":"2024-02-27T22:44:50+09:00","permalink":"https://tech.plutslet.pe.kr/post/ef-core-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/","title":"EF Core 시작하기"},{"content":"input 태그를 사용할 떄 특정 타입만 허용하고 싶을 때가 있습니다.\ninput의 accept를 지정하기만 하면 간단하게 제한할 수 있죠.\n예를 들어 image만 허용하려고 한다면 대략 아래와 같습니다.\n\u0026lt;input type=\u0026#34;file\u0026#34; accept=\u0026#34;image/*\u0026#34;\u0026gt; 그런데 파일 선택하는 창에서 모든 파일(.)을 선택할 수 있고, 이때는 accept를 지정해도 의미가 없어집니다.\n이때는 선택한 파일의 확장자를 확인하는 스크립트가 필요하게 되죠.\n선택한 파일을 가져와서 파일의 확장자를 확인하고, 파일의 확장자가 지정해둔 확장자가 맞다면 파일을 허용하는, 그런 절차가 필요해지게 됩니다.\n이런 상황에서 사용할 함수는 아래처럼 작성할 수 있습니다.\n선택한 파일들을 전부 확인하고 모두 image 형태라면 false를 image 형태가 하나라도 아니면 true를 반환하는 함수입니다.\nconst checkFileType = (files: File[]) =\u0026gt; { let result = false for (const file of files) { if (file.type.includes(\u0026#39;image\u0026#39;) !== true) { result = true } } return result } 파일 입력을 받을 때의 이벤트에 아래처럼 사용하면 됩니다.\nif (checkFileType(files)) { inputFileEl.value.value = null alert(\u0026#39;이미지 파일만 첨부 가능합니다.\u0026#39;) return } 저는 vue3에서, 그리고 타입스크립트로 작성하고 사용해서 위의 형태지만, 함수 내부와 if문 내부는 원하는 방식으로 수정하면 됩니다.\n함수의 bool 값을 반대로 설정한다던지, 타입을 다르게 한다던지, 아래 if 내부 처리를 다르게 한다던지 등처럼 말이죠.\n","date":"2024-02-23T22:01:31+09:00","permalink":"https://tech.plutslet.pe.kr/post/input-%ED%83%9C%EA%B7%B8-file-%ED%99%95%EC%9E%A5%EC%9E%90-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0/","title":"input 태그 file 확장자 제한하기"},{"content":"가끔 모바일 브라우저에서 input 태그를 사용한 입력란을 터치해 입력을 시작할 때 해당 입력란을 확대 시켜서 보여주는 경우가 있습니다.\n확대하지 않는 동작이 프로세스 상 올바른 동작일 때 이를 방지하는 방법이 있습니다.\n방법은 간단한데, index.html의 header 태그 안에서 meta 태그로 viewport 관련해서 설정하는 부분이 있습니다.\n해당 태그 안 content 부분에 user-scalable=no 구문을 추가해주면 입력란을 터치할 때마다 확대하는 걸 방지할 수 있습니다.\n대략 아래와 같이 작성할 수 있습니다.\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,initial-scale=1.0,user-scalable=no\u0026#34; /\u0026gt; mata 태그 안에 지정할 수 있는 다양한 옵션값이 있으니 관심있으시면 조금 더 알아보는 것도 좋을 것 같습니다.\n참고 링크 https://talkwithcode.tistory.com/7 https://taeminimini.tistory.com/438 ","date":"2024-02-14T23:19:25+09:00","permalink":"https://tech.plutslet.pe.kr/post/html-%EB%AA%A8%EB%B0%94%EC%9D%BC%EC%97%90%EC%84%9C-input-%ED%83%9C%EA%B7%B8-%ED%81%B4%EB%A6%AD%EC%8B%9C-%ED%99%95%EB%8C%80-%EB%B0%A9%EC%A7%80/","title":"html 모바일에서 input 태그 클릭시 확대 방지"},{"content":"Vue에서 이미지를 동적으로 할당해야하는 부분이 있었습니다.\n대략 /src/assets/images/img.png 이런 느낌의 string 타입을 반환하는 함수를 만들었고, 대략 \u0026lt;img :src=\u0026quot;imgSrc()\u0026quot;\u0026gt; 이런 느낌으로 할당해봤죠.\nnpm run dev 통해 실행한 프로젝트에서는 위의 코드로도 잘 작동해서 문제가 없을 줄 알았습니다.\n하지만 빌드해서 확인한 페이지에서는 이미지가 표시되지 않았습니다.\n이유는 과연 뭘까요?\n문제 문제의 원인을 파악하고 보니 생각보다 간단한 문제였습니다.\n배포된 프로젝트에서 이미지를 가져올 때는 src가 위에서처럼 \u0026lsquo;/\u0026rsquo; 부터 시작하는 상대주소로 되어 있으면 안됩니다.\n상대주소로 된 링크를 참고한다면 대체 어떤 곳을 참고해야 할까요.\n참고할 주소를 찾지 못하게 되는 것이죠.\n로컬호스트이 아니라 빌드하여 배포한 프로젝트라면 src 부분은 \u0026lsquo;http://\u0026rsquo; 부터 시작하는 절대 링크 형태로 구성되어야 합니다.\n그럼, Vue에서 이미지의 src를 동적으로 할당하는 방법을 알아 봅시다.\n해결 아래의 방법을 사용하면 문자열로 된 상대주소를 동적으로 할당할 수 있게 됩니다.\nrequire 사용해 이미지 불러오기\nrequire(`@/assets/images/img.png`) 이미지를 import한다는 의미로 require 구문을 사용할 수 있습니다. config에 사용하도록 설정된 module에 따라 사용할 수 없는 경우가 있습니다.\n동적으로 URL 만들기\nnew URL(`/src/assets/images/img.png`, import.meta.url).href; SSR에서는 동작하지 않는다고 합니다.\n브라우저와 Node.js 에서 import.meta.url의 값이 달라지거나 서버 입장에서도 클라이언트의 호스트 url을 미리 결정할 수 없기 때문이라고 합니다.\npublic 폴더에 이미지 넣기\n\u0026lt;img src=\u0026#34;/images/img.png\u0026#34; /\u0026gt;; 말 그대로 이미지를 프로젝트 내부에서 assets 폴더가 아닌 public에 넣어두는 방법입니다.\npublic 폴더에 넣어두면 상대 주소를 사용해도 정상적으로 불러옵니다.\n참고링크 https://blogcreator.blog/post/39 https://stackoverflow.com/questions/40491506/vue-js-dynamic-images-not-working-with-webpack ","date":"2024-02-14T00:34:14+09:00","permalink":"https://tech.plutslet.pe.kr/post/vue%EC%97%90%EC%84%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-src-%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0/","title":"Vue에서 이미지 src 동적으로 할당하기"},{"content":"css에서 hight를 조절하다가 알게된 점을 기록합니다.\n문제 대략 상황은 이랬습니다.\nmain 태그의 높이를 vh 단위로 지정해서 사용하던 중 모바일 환경에서는 높이가 의도한 대로 지정되지 않았습니다.\n태그의 높이를 모바일 브라우저의 상단, 하단 메뉴의 크기를 반영해서 지정하는 것이 아니라 그냥 화면의 크기 만큼 높이를 지정해버리는 것이었죠. 그래서 화면이 일부 잘린 것처럼 보였고, 잘린 부분은 아예 접근할 수 없게 되어 버리는 것입니다.\n해결 여러가지를 조사하던 중 높이 단위가 vh만 있던 게 아니더군요.\n모바일 브라우저에 대응되는 높이 단위는 아래와 같습니다.\nsvh: Small Viewport Height, 가장 작은 화면 영역을 의미하는 높이 단위입니다. 상, 하단 메뉴가 없어도 해당 높이를 반영하여 값을 가져옵니다. lvh: Large Viewport Height, 가장 높은 영역을 의미하는 높이 단위입니다. 상, 하단 메뉴가 있어도 무시한 값을 가져옵니다. dvh: Dynamic Viewport Height, 동적으로 표시되는 영역의 높이 단위입니다. 상, 하단 메뉴를 확인하고 유무에 따라 해당 높이를 반영한 값을 가져옵니다. 즉 위의 높이 단위를 적절히 이용하면, 모바일 브라우저에서 상단, 하단 메뉴가 나타나고 사라지는 과정에서도 메뉴의 높이를 반영한 값을 사용할 수 있는 것이죠.\n저는 조사한 높이 단위 중에서 dvh를 사용했습니다.\n사용법은 아래의 코드처럼 사용할 수 있습니다.\nmain { height:100dvh; } 이 높이 단위를 더 자세히 살펴보고 싶다면 아래의 링크도 확인해주세요.\n더 자세하게 설명되어 있습니다.\n참고 자료 https://web.dev/blog/viewport-units?hl=ko https://mong-blog.tistory.com/entry/CSSJS-vh-버그-해결방법dvh-사용법-js-계산법 ","date":"2024-02-08T00:31:19+09:00","permalink":"https://tech.plutslet.pe.kr/post/%EB%AA%A8%EB%B0%94%EC%9D%BC-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-css-%EB%86%92%EC%9D%B4-%EB%8B%A8%EC%9C%84/","title":"모바일 환경에서의 css 높이 단위"},{"content":"최근 Vue 프로젝트에서 S3 URL을 다운로드되는 기능을 구현해야 하는 일이 있었습니다. fetch를 이용해서 파일을 blob 형태로 받아와 다운로드 시키도록 하도록 처리했죠. 다른 파일들은 다운로드가 잘 이뤄졌는데, 어떤 페이지에서는 이미지가 CORS 오류로 다운로드되지 않는 문제가 발생했습니다. 이 글은 해당 문제를 정리한 내용입니다.\n문제 위에서 언급했듯이 S3 URL을 가지고 있었고, 해당 링크를 이용해 다운로드 되도록 기능을 구현한 상태였습니다.\n다른 페이지에서는 모두 동작하는데, 이미지를 보여주고 해당 이미지를 다운로드 할 수 있는 페이지에서만 CORS 문제를 일으켰습니다.\n콘솔 창에 나타난 문구는 대략 이런 문구였습니다.\nNo \u0026#39;Access-Control-Allow-Origin\u0026#39; header is present on the requested resource. Origin \u0026#39;http://localhost:5173\u0026#39; is therefore not allowed access. If an opaque response serves your needs, set the request\u0026#39;s mode to \u0026#39;no-cors\u0026#39; to fetch the resource with CORS disabled. 그래서 오류 메시지 대로 fetch의 모드를 \u0026rsquo;no-cors\u0026rsquo;로 변경하고 다시 테스트 해봤습니다.\n하지만 이제는 파일을 정상적으로 다운로드 받지 못하고 용량이 모두 0 사이즈였습니다.\n그래서 다시 돌려놓고 다른 방향으로 문제를 보기 시작했습니다.\n혹시 페이지에서 이미지를 먼저 불러온게 문제가 된 건 아닐까.\n다르게 말하면 이미지가 캐시된 상태라서 그런 건 아닐까.\n정답부터 말하자면,\n캐시가 문제였습니다.\n해결 문제의 원인은 생각보다 간단했습니다.\nS3의 이미지가 이미 다운로드되어 페이지에서 노출이 되는 상태였고, 해당 이미지는 그렇게 캐시된 상태가 되었습니다.\n그런 다음 fetch를 이용해 이미지 다운로드 받을 경우, 이미 해당 이미지의 캐시가 남아있기 때문에 다운로드 받지 못하는 상태였던 거죠.\n해당 문제를 해결할 때 도움받은 블로그 글은 이사님이 찾아주셨습니다. 아래의 링크를 남겨두었으니 참고해주세요.\n이미지가 캐시가 된 상태라면 캐시 없이 다운로드 받으면 문제는 해결입니다.\n저는 fetch를 이용해 다운로드 받아오기 때문에 아래처럼 옵션을 추가해 주었습니다.\nfetch(\u0026#39;URL\u0026#39;, { cache: \u0026#39;no-cache\u0026#39;}); 저는 추가로 CORS 모드로 설정하는 mode: \u0026quot;cors\u0026quot; 같은 부분 도 추가로 작성해서 다운로드 받도록 하고 있습니다.\n아직 모르는 게 많은 저이지만,\n오늘도 하나씩 배워갑니다.\n참고자료 https://velog.io/@hyesungoh/Webview-app에서-이미지-저장-기능-개발기-w-AWS-s3#aws-s3-cors ","date":"2024-02-02T22:41:19+09:00","permalink":"https://tech.plutslet.pe.kr/post/s3-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-cors-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/","title":"S3 이미지 다운로드 CORS 문제 해결"},{"content":"깃허브 페이지로 블로그를 만들 때부터 개인 도메인으로 연결하고 싶다는 생각이 있었습니다. 이 글은 깃허브 페이지에서 커스텀 도메인 설정하며 정리한 내용입니다.\n시작 기본적으로 깃허브 페이지를 만들면 아래의 URL 형태로 만들어 집니다.\nhttps://깃허브아이디.github.io/ 저의 경우는 https://plutslet0316.github.io/ 입니다.\n위의 URL을 아래처럼 제 개인 도메인으로 변경할 생각입니다.\nhttps://blog.plutslet.pe.kr/ 도메인 DNS 설정 현재 사용 중인 DNS 관리 사이트에서 아래의 설정을 진행합니다.\n레코드 타입: CNAME 서브 도메인(Name): 원하는 도메인 - blog 대상 주소: 깃허브아이디.github.io 저는 클라우드플레어를 이용중이고 설정한 예시 이미지는 아래와 같습니다.\n깃허브에서 커스텀 도메인 설정 원하는 저장소에서 Setting → Pages 을 차례로 클릭해 깃허브 페이지 설정창으로 이동합니다. Custom domain 항목을 찾아 입력란에 원하는 도메인을 입력 후 Save 버튼을 클릭합니다. 깃허브에서 DNS 확인을 진행하고, 이후 완료가 되면 해당 도메인으로 접근할 수 있게 됩니다. 아래의 사진은 DNS 설정 후 확인까지 마친 예시 이미지 입니다.\n참고자료 깃허브 공식: https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site Github 블로그에 Custom도메인 연결하기: https://mishka.kr/12 깃허브에 커스텀 도메인 사용하기: https://taedonn.tistory.com/22 깃허브 블로그 개인 도메인: https://wonderbout.tistory.com/120 ","date":"2024-01-30T22:36:50+09:00","permalink":"https://tech.plutslet.pe.kr/post/github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/","title":"GitHub 페이지 커스텀 도메인 설정하기"},{"content":"Hugo 빌드 속도가 빠릅니다. 핫리로드 기능을 지원합니다. 한글로 작성해도 문제없이 출력됩니다. 요구사항 Git: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git Go: https://go.dev/doc/install 최신버전: go1.21.1.windows-amd64.msi Dart Sass 패치키 툴: https://chocolatey.org/install#individual\nwindow 기준 powershell을 관리자 권한으로 실행 → 아래 명령 복사 후 붙여넣기 → 엔터해서 설치\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) dart-sass: https://gohugo.io/hugo-pipes/transpile-sass-to-css/#dart-sass\n명령 실행 choco install sass Hugo 확장판 설치 위에서 설치한 패키지 툴을 이용해서 확장판설치 choco install hugo-extended Hugo로 블로그 구축하기 원하는 위치에서 hugo new site 폴더이름 해당 위치에 폴더이름으로 hugo 사이트가 만들어 진다. cd 폴더이름 git init https://themes.gohugo.io/ 해당 사이트에서 원하는 테마 찾기 찾은 테마 https://themes.gohugo.io/themes/hugo-theme-stack/ GitHub: https://github.com/CaiJimmy/hugo-theme-stack 테마 적용 - git submodule add git주소 themes/테마이름 예시: git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/stack hugo.toml 수정 baseURL 수정: https://깃허브아이디.github.io/ 테마 지정: theme = '테마이름’ / 예시: theme = 'stack’ 로컬 테스트: hugo server 깃허브에 업로드 깃허브에 업로드하기 위해서 레파지토리가 두개 필요합니다. Hugo로 만들어진 블로그 생성기 (private) Hugo가 랜더링한 정적 블로그 html (public) 레파지토리를 만든 이후 아래의 명령을 수정하고 입력하여 깃허브의 초기 설정을 진행합니다. git remote add origin 1번레파짓토리git주소 git submodule add -b master 2번레파짓토리git주소 public 깃허브 설정 이후 아래의 명령을 통해 빌드하여 깃허브에 업로드 합니다. hugo -D git add . git commit -m \u0026#34;test\u0026#34; git push origin master cd public git add . git commit -m \u0026#34;test\u0026#34; git push origin master 깃허브 페이지 활성화 위에서 만든 2번 레파지토리의 깃허브 페이지를 활성화하면 깃블로그 구축이 완료됩니다.\n참고자료 공식 설치 지침: https://gohugo.io/installation/windows/ 한글 자료Hugo로 개인 블로그 만드는 법: https://selfinvestfriends.tistory.com/78 GitHub Pages 빠른 시작: https://docs.github.com/ko/pages/quickstart 깃허브 페이지(GitHub Pages) 만들기: https://phodobit.kr/49 ","date":"2024-01-24T23:06:58+09:00","permalink":"https://tech.plutslet.pe.kr/post/hugo%EC%99%80-github%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/","title":"Hugo와 GitHub로 블로그 만들기"}]